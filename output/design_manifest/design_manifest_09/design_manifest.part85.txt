", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_06/design_manifest.part60.txt", "sha256_chunk": "a97072fee60665aea135025134ee605a2219071e2426f761d7a4d02a97db3137", "sha256_file": "a97072fee60665aea135025134ee605a2219071e2426f761d7a4d02a97db3137", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "