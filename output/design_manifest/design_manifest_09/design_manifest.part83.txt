", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_06/design_manifest.part58.txt", "sha256_chunk": "f77750dad90db8e15af8ed017480fba4274dffca06050abdc66df45f1dd7555e", "sha256_file": "f77750dad90db8e15af8ed017480fba4274dffca06050abdc66df45f1dd7555e", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "