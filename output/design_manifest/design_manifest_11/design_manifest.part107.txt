", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_08/design_manifest.part76.txt", "sha256_chunk": "59483b75a820b744626c9efa38fe20085a7cfff8dd32f0cf0f8adf586cd2f7dd", "sha256_file": "59483b75a820b744626c9efa38fe20085a7cfff8dd32f0cf0f8adf586cd2f7dd", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "