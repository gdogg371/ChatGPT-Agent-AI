", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_08/design_manifest.part78.txt", "sha256_chunk": "12dee62ec70a9c04a05cf36684ad680528601151038e63ba934bb3528e1c617b", "sha256_file": "12dee62ec70a9c04a05cf36684ad680528601151038e63ba934bb3528e1c617b", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "