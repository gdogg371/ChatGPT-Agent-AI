", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_04/design_manifest.part40.txt", "sha256_chunk": "0124594e9018ac7bafd71c8189af7a771cc0654f33291e4ea83d46a5fe3f03c8", "sha256_file": "0124594e9018ac7bafd71c8189af7a771cc0654f33291e4ea83d46a5fe3f03c8", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "