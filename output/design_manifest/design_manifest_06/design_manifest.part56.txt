", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_04/design_manifest.part38.txt", "sha256_chunk": "8d86f9a85504a9e6e2d90c9f43bd3b2ea47c6c1d86d3a15ede71365f9d854a58", "sha256_file": "8d86f9a85504a9e6e2d90c9f43bd3b2ea47c6c1d86d3a15ede71365f9d854a58", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "