", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_07/design_manifest.part70.txt", "sha256_chunk": "58dbf359a0b720daa18104f767b1e6ad6061893ae272c82c2b8c553b4a27c9b6", "sha256_file": "58dbf359a0b720daa18104f767b1e6ad6061893ae272c82c2b8c553b4a27c9b6", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "