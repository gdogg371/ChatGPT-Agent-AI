", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_07/design_manifest.part66.txt", "sha256_chunk": "5f882305ee0ca3caad5331d25e03aa675bf08bfb72ed42f85e2645d81b4d95c8", "sha256_file": "5f882305ee0ca3caad5331d25e03aa675bf08bfb72ed42f85e2645d81b4d95c8", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "