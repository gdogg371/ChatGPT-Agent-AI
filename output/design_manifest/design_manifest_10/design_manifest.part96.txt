", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_07/design_manifest.part68.txt", "sha256_chunk": "05f99aa5ec56155d4879a49e22694b453d4ac6570adcdf1bbda6cd36e311a10c", "sha256_file": "05f99aa5ec56155d4879a49e22694b453d4ac6570adcdf1bbda6cd36e311a10c", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "