", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_07/design_manifest.part64.txt", "sha256_chunk": "9368e340f17b5fedb00727d57a140af3079a822bae18bc436b63d50694f97f00", "sha256_file": "9368e340f17b5fedb00727d57a140af3079a822bae18bc436b63d50694f97f00", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "