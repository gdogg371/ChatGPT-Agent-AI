", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_09/design_manifest.part88.txt", "sha256_chunk": "63a63b3e1cb9cad1747b73838704b27c1f02d1bacdd93420c1f37667b4a59e1a", "sha256_file": "63a63b3e1cb9cad1747b73838704b27c1f02d1bacdd93420c1f37667b4a59e1a", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "