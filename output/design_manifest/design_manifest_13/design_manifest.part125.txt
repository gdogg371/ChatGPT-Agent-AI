", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_09/design_manifest.part90.txt", "sha256_chunk": "22c8d0ee14b9ff26cbacef52b6798467991635c5e6b0275d33a56e398c25c7d5", "sha256_file": "22c8d0ee14b9ff26cbacef52b6798467991635c5e6b0275d33a56e398c25c7d5", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "