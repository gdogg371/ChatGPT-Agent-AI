", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_09/design_manifest.part84.txt", "sha256_chunk": "f59ebba8d6f0b777a66d852c887bc7c64901e4bed29077dddfeb8fbf7a4df3d1", "sha256_file": "f59ebba8d6f0b777a66d852c887bc7c64901e4bed29077dddfeb8fbf7a4df3d1", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "