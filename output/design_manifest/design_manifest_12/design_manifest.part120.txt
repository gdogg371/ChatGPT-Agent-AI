", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_09/design_manifest.part86.txt", "sha256_chunk": "50185bcdb37c0fdea62bee920a3980247dc1f3d4c69600159253690842739099", "sha256_file": "50185bcdb37c0fdea62bee920a3980247dc1f3d4c69600159253690842739099", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "