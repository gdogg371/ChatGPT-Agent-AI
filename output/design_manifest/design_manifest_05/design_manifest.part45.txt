", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_03/design_manifest.part30.txt", "sha256_chunk": "b137f0f0b78acb3e6e2456ab02f389324c764bba13855c1ebfa48747a7046f14", "sha256_file": "b137f0f0b78acb3e6e2456ab02f389324c764bba13855c1ebfa48747a7046f14", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "