", "path": "output/patch_code_bundles/patches/output/design_manifest/design_manifest_03/design_manifest.part26.txt", "sha256_chunk": "ac7353ccad97d8fced0fe530b677970a6a9575511e0ffebeeaa8a86b5ff5fb8e", "sha256_file": "ac7353ccad97d8fced0fe530b677970a6a9575511e0ffebeeaa8a86b5ff5fb8e", "type": "file_chunk"}
{"byte_end": 300000, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "