", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/code_bundles/src/packager/core/orchestrator.py", "sha256_chunk": "f3c5f66096f8be017bb73c3b53c69a2516808348ba9c198731fac5c211392a8e", "sha256_file": "f3c5f66096f8be017bb73c3b53c69a2516808348ba9c198731fac5c211392a8e", "type": "file_chunk"}
{"byte_end": 617, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgsIFB1cmVQb3NpeFBhdGgKCmNsYXNzIFBhdGhPcHM6CiAgICAiIiJQYXRoIGhlbHBlcnMgZm9yIGJ1bmRsZSBlbWlzc2lvbi4gU3RhdGljLW9ubHkuIiIiCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgdG9fcG9zaXhfcmVsKHBhdGg6IFBhdGgsIHJvb3Q6IFBhdGgpIC0+IHN0cjoKICAgICAgICByZXR1cm4gUHVyZVBvc2l4UGF0aChwYXRoLnJlbGF0aXZlX3RvKHJvb3QpKS5hc19wb3NpeCgpCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIGVtaXR0ZWRfcGF0aChyZWxfcG9zaXg6IHN0ciwgZW1pdHRlZF9wcmVmaXg6IHN0cikgLT4gc3RyOgogICAgICAgIGVwID0gKGVtaXR0ZWRfcHJlZml4IG9yICIiKS5zdHJpcCgpCiAgICAgICAgaWYgbm90IGVwLmVuZHN3aXRoKCIvIik6CiAgICAgICAgICAgIGVwICs9ICIvIgogICAgICAgIHJldHVybiBmIntlcH17cmVsX3Bvc2l4fSIuc3RyaXAoKQoKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBlbnN1cmVfZGlyKHA6IFBhdGgpIC0+IE5vbmU6CiAgICAgICAgcC5wYXJlbnQubWtkaXIocGFyZW50cz1UcnVlLCBleGlzdF9vaz1UcnVlKQo=", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/code_bundles/src/packager/core/paths.py", "sha256_chunk": "6dc67b6d69dca59ea929e8ea9387802438344750344b41882e09818935c62124", "sha256_file": "6dc67b6d69dca59ea929e8ea9387802438344750344b41882e09818935c62124", "type": "file_chunk"}
{"byte_end": 6517, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/code_bundles/src/packager/io/guide_writer.py", "sha256_chunk": "4a1de8e7bc0e69e80ef56e0cd52c174104982b1e040df7fda278bdc439af4c60", "sha256_file": "4a1de8e7bc0e69e80ef56e0cd52c174104982b1e040df7fda278bdc439af4c60", "type": "file_chunk"}
{"byte_end": 1197, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBJdGVyYWJsZSwgTGlzdCwgVHVwbGUsIERpY3QsIEFueQppbXBvcnQganNvbgoKZnJvbSAuLmNvcmUucGF0aHMgaW1wb3J0IFBhdGhPcHMKZnJvbSAuLmNvcmUuaW50ZWdyaXR5IGltcG9ydCBJbnRlZ3JpdHkKCgpjbGFzcyBCdW5kbGVXcml0ZXI6CiAgICAiIiJXcml0ZXMgdGhlIEpTT05MIGJ1bmRsZSBhbmQgYSBjb21wYW5pb24gU0hBMjU2U1VNUyBmaWxlLiIiIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBvdXRfcGF0aDogUGF0aCkgLT4gTm9uZToKICAgICAgICBzZWxmLm91dF9wYXRoID0gb3V0X3BhdGgKCiAgICBkZWYgd3JpdGUoc2VsZiwgcmVjb3JkczogSXRlcmFibGVbRGljdFtzdHIsIEFueV1dKSAtPiBOb25lOgogICAgICAgICIiIldyaXRlIEpTT05MIHJlY29yZHMgdG8gdGhlIG1hbmlmZXN0IHBhdGguIiIiCiAgICAgICAgUGF0aE9wcy5lbnN1cmVfZGlyKHNlbGYub3V0X3BhdGgpCiAgICAgICAgd2l0aCBvcGVuKHNlbGYub3V0X3BhdGgsICJ3IiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZjoKICAgICAgICAgICAgZm9yIHJlYyBpbiByZWNvcmRzOgogICAgICAgICAgICAgICAganNvbi5kdW1wKHJlYywgZiwgZW5zdXJlX2FzY2lpPUZhbHNlLCBzb3J0X2tleXM9VHJ1ZSkKICAgICAgICAgICAgICAgIGYud3JpdGUoIlxuIikKCiAgICBkZWYgd3JpdGVfc3VtcyhzZWxmLCBvdXRfc3VtczogUGF0aCwgZmlsZXM6IExpc3RbVHVwbGVbc3RyLCBieXRlc11dKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIFdyaXRlIFNIQTI1NlNVTVMgbGluZXM6CiAgICAgICAgICAgIDxzaGEyNTY+4pCg4pCgPHJlbGF0aXZlLW5hbWU+CiAgICAgICAgd2hlcmUgdGhlIGhhc2ggaXMgY29tcHV0ZWQgb3ZlciB0aGUgZmlsZSBieXRlcyBwcm92aWRlZC4KICAgICAgICAiIiIKICAgICAgICBsaW5lcyA9IFtmIntJbnRlZ3JpdHkuc2hhMjU2X2J5dGVzKGRhdGEpfSAge3JlbH0iIGZvciAocmVsLCBkYXRhKSBpbiBmaWxlc10KICAgICAgICBQYXRoT3BzLmVuc3VyZV9kaXIob3V0X3N1bXMpCiAgICAgICAgd2l0aCBvcGVuKG91dF9zdW1zLCAid2IiKSBhcyBmOgogICAgICAgICAgICBmLndyaXRlKCgiXG4iLmpvaW4obGluZXMpICsgIlxuIikuZW5jb2RlKCJ1dGYtOCIpKQoK", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/code_bundles/src/packager/io/manifest_writer.py", "sha256_chunk": "627622c3de6dd6a32e6d2d1709c3023d95641fc8212fb59cd7578b46d59a17d6", "sha256_file": "627622c3de6dd6a32e6d2d1709c3023d95641fc8212fb59cd7578b46d59a17d6", "type": "file_chunk"}
{"byte_end": 20261, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/code_bundles/src/packager/io/publisher.py", "sha256_chunk": "6e6dbdb4d58d1b636e235eb248cb2157b4def1e6e6f61ca4ab9204e93aa3553a", "sha256_file": "6e6dbdb4d58d1b636e235eb248cb2157b4def1e6e6f61ca4ab9204e93aa3553a", "type": "file_chunk"}
{"byte_end": 2973, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "IyBjb2RlYmFzZS9zcmMvcGFja2FnZXIvaW8vcnVuc3BlY193cml0ZXIucHkKZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBBbnksIERpY3QsIE9wdGlvbmFsCmltcG9ydCBqc29uCmltcG9ydCB0aW1lCgp0cnk6CiAgICBmcm9tIHYyLmJhY2tlbmQuY29yZS51dGlscy5jb2RlX2J1bmRsZXMuY29kZV9idW5kbGVzLnNyYy5wYWNrYWdlci5jb3JlLmNvbmZpZyBpbXBvcnQgUGFja0NvbmZpZywgVHJhbnNwb3J0T3B0aW9ucwpleGNlcHQgRXhjZXB0aW9uOgogICAgZnJvbSAuLmNvcmUuY29uZmlnIGltcG9ydCBQYWNrQ29uZmlnLCBUcmFuc3BvcnRPcHRpb25zICAjIHR5cGU6IGlnbm9yZQoKCmNsYXNzIFJ1blNwZWNXcml0ZXI6CiAgICAiIiJQcm9kdWNlcyBhIGNvbXBhY3QsIGFzc2lzdGFudC1mYWNpbmcgc25hcHNob3Qgb2YgYSBydW4uIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHRhcmdldF9wYXRoOiBQYXRoKSAtPiBOb25lOgogICAgICAgIHNlbGYudGFyZ2V0X3BhdGggPSB0YXJnZXRfcGF0aAoKICAgIGRlZiBidWlsZF9zbmFwc2hvdCgKICAgICAgICBzZWxmLAogICAgICAgIGNmZzogUGFja0NvbmZpZywKICAgICAgICBwcm92ZW5hbmNlOiBEaWN0W3N0ciwgQW55XSwKICAgICAgICBwcm9tcHRzX3B1YmxpYzogT3B0aW9uYWxbZGljdF0gPSBOb25lLAogICAgKSAtPiBEaWN0W3N0ciwgQW55XToKICAgICAgICB0OiBUcmFuc3BvcnRPcHRpb25zID0gY2ZnLnRyYW5zcG9ydAogICAgICAgICMgQnVpbGQgYSBzdGFibGUgJ2NvbmZpZ19zbmFwc2hvdCcgc2ltaWxhciB0byB0aGUgbG9jYWwgc3VwZXJidW5kbGUucnVuLmpzb24KICAgICAgICBzbmFwc2hvdCA9IHsKICAgICAgICAgICAgImNvbmZpZ19zbmFwc2hvdCI6IHsKICAgICAgICAgICAgICAgICJlbWl0dGVkX3ByZWZpeCI6IGNmZy5lbWl0dGVkX3ByZWZpeCwKICAgICAgICAgICAgICAgICJleGNsdWRlX2dsb2JzIjogbGlzdChjZmcuZXhjbHVkZV9nbG9icyksCiAgICAgICAgICAgICAgICAiaW5jbHVkZV9nbG9icyI6IGxpc3QoY2ZnLmluY2x1ZGVfZ2xvYnMpLAogICAgICAgICAgICAgICAgInNlZ21lbnRfZXhjbHVkZXMiOiBsaXN0KGNmZy5zZWdtZW50X2V4Y2x1ZGVzKSwKICAgICAgICAgICAgICAgICJleGVjdXRpb25fcG9saWN5IjogewogICAgICAgICAgICAgICAgICAgICJzYW5kYm94IjogewogICAgICAgICAgICAgICAgICAgICAgICAiY29uc3RyYWludHMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAib2ZmbGluZV9vbmx5IjogVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAicGhhc2VzIjogWyJvbl9pbnRha2UiLCAiZW5kX29mX2Rldl9jeWNsZSJdLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZV9hdHRlbXB0IjogVHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgInNlY3JldHNfcG9saWN5IjogeyJub19zZWNyZXRzIjogVHJ1ZX0sCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ0cmFuc3BvcnQiOiB7CiAgICAgICAgICAgICAgICAgICAgImNodW5rX2J5dGVzIjogdC5jaHVua19ieXRlcywKICAgICAgICAgICAgICAgICAgICAiY2h1bmtfcmVjb3JkcyI6IGJvb2wodC5jaHVua19yZWNvcmRzKSwKICAgICAgICAgICAgICAgICAgICAiZ3JvdXBpbmciOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJkaXJfcGF0dGVybiI6IGYie3QucGFydF9zdGVtfV97ezowe3QuZGlyX3N1ZmZpeF93aWR0aH1kfX0iLAogICAgICAgICAgICAgICAgICAgICAgICAiZGlyX3N1ZmZpeF93aWR0aCI6IHQuZGlyX3N1ZmZpeF93aWR0aCwKICAgICAgICAgICAgICAgICAgICAgICAgImdyb3VwX2RpcnMiOiBib29sKHQuZ3JvdXBfZGlycyksCiAgICAgICAgICAgICAgICAgICAgICAgICJwYXJ0c19wZXJfZGlyIjogdC5wYXJ0c19wZXJfZGlyLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInBhcnRfZXh0IjogdC5wYXJ0X2V4dCwKICAgICAgICAgICAgICAgICAgICAicGFydF9zdGVtIjogdC5wYXJ0X3N0ZW0sCiAgICAgICAgICAgICAgICAgICAgInBhcnRzX2luZGV4IjogdC5wYXJ0c19pbmRleF9uYW1lLAogICAgICAgICAgICAgICAgICAgICJwYXlsb2FkX2Zvcm1hdCI6ICJqc29ubCIsCiAgICAgICAgICAgICAgICAgICAgInByZXNlcnZlX21vbm9saXRoIjogRmFsc2UsCiAgICAgICAgICAgICAgICAgICAgInNwbGl0X2J5dGVzIjogdC5zcGxpdF9ieXRlcywKICAgICAgICAgICAgICAgICAgICAidHJhbnNwb3J0X2hpbnQiOiAidHh0IiBpZiB0LnRyYW5zcG9ydF9hc190ZXh0IGVsc2UgImpzb25sIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJwcm92ZW5hbmNlIjogZGljdChwcm92ZW5hbmNlKSwKICAgICAgICAgICAgInRpbWVzdGFtcCI6IHRpbWUuc3RyZnRpbWUoIiVZLSVtLSVkVCVIOiVNOiVTWiIsIHRpbWUuZ210aW1lKCkpLAogICAgICAgICAgICAidmVyc2lvbiI6ICIxIiwKICAgICAgICB9CiAgICAgICAgaWYgcHJvbXB0c19wdWJsaWM6CiAgICAgICAgICAgIHNuYXBzaG90WyJwcm9tcHRzIl0gPSBwcm9tcHRzX3B1YmxpYwogICAgICAgIHJldHVybiBzbmFwc2hvdAoKICAgIGRlZiB3cml0ZShzZWxmLCBzbmFwc2hvdDogRGljdFtzdHIsIEFueV0pIC0+IE5vbmU6CiAgICAgICAgc2VsZi50YXJnZXRfcGF0aC5wYXJlbnQubWtkaXIocGFyZW50cz1UcnVlLCBleGlzdF9vaz1UcnVlKQogICAgICAgIHNlbGYudGFyZ2V0X3BhdGgud3JpdGVfdGV4dCgKICAgICAgICAgICAganNvbi5kdW1wcyhzbmFwc2hvdCwgZW5zdXJlX2FzY2lpPUZhbHNlLCBzb3J0X2tleXM9VHJ1ZSwgaW5kZW50PTIpLAogICAgICAgICAgICBlbmNvZGluZz0idXRmLTgiLAogICAgICAgICkK", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/code_bundles/src/packager/io/runspec_writer.py", "sha256_chunk": "9b61ac1b97a9bdb07fd80dc623177375c2cfffc211eb300c1e4053a0e8e8944e", "sha256_file": "9b61ac1b97a9bdb07fd80dc623177375c2cfffc211eb300c1e4053a0e8e8944e", "type": "file_chunk"}
{"byte_end": 2369, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIExpc3QsIFR1cGxlLCBBbnkKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmltcG9ydCBoYXNobGliCmltcG9ydCBzeXMKCiMgLS0tIGVuc3VyZSByZXBvIHJvb3QgaXMgaW1wb3J0YWJsZSBzbyB0b3AtbGV2ZWwgaGVscGVycyByZXNvbHZlIC0tLQpkZWYgX2FkZF9yZXBvX3Jvb3RfdG9fc3lzcGF0aCgpIC0+IE5vbmU6CiAgICBoZXJlID0gUGF0aChfX2ZpbGVfXykucmVzb2x2ZSgpCiAgICByb290ID0gTm9uZQogICAgZm9yIHAgaW4gaGVyZS5wYXJlbnRzOgogICAgICAgIGlmIHAubmFtZSA9PSAic3JjIjoKICAgICAgICAgICAgcm9vdCA9IHAucGFyZW50CiAgICAgICAgICAgIGJyZWFrCiAgICBpZiByb290IGFuZCBzdHIocm9vdCkgbm90IGluIHN5cy5wYXRoOgogICAgICAgIHN5cy5wYXRoLmluc2VydCgwLCBzdHIocm9vdCkpCgp0cnk6CiAgICBpbXBvcnQgcHl0aG9uX2luZGV4IGFzIHBpZHgKICAgIGltcG9ydCBncmFwaHMgYXMgZwpleGNlcHQgRXhjZXB0aW9uOgogICAgX2FkZF9yZXBvX3Jvb3RfdG9fc3lzcGF0aCgpCiAgICBpbXBvcnQgcHl0aG9uX2luZGV4IGFzIHBpZHggICMgdHlwZTogaWdub3JlCiAgICBpbXBvcnQgZ3JhcGhzIGFzIGcgICAgICAgICAgICMgdHlwZTogaWdub3JlCgojIC0tLSBGaWxlUmVjIHNoaW0gKG1hdGNoZXMgYnVuZGxlX2lvLkZpbGVSZWMgc2hhcGUpIC0tLQp0cnk6CiAgICBmcm9tIGJ1bmRsZV9pbyBpbXBvcnQgRmlsZVJlYyAgIyBwYXRoOiBzdHIsIGRhdGE6IGJ5dGVzLCBzaGEyNTY6IHN0cgpleGNlcHQgRXhjZXB0aW9uOgogICAgZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzCiAgICBAZGF0YWNsYXNzKGZyb3plbj1UcnVlKQogICAgY2xhc3MgRmlsZVJlYzogICMgdHlwZTogaWdub3JlCiAgICAgICAgcGF0aDogc3RyCiAgICAgICAgZGF0YTogYnl0ZXMKICAgICAgICBzaGEyNTY6IHN0cgoKCmNsYXNzIFB5dGhvbkFuYWx5emVyOgogICAgIiIiCiAgICBBZGFwdGVyIHRoYXQgcnVucyBQeXRob24gYW5hbHlzZXMgYW5kIHJldHVybnMgYnVuZGxlLXJlYWR5IGFydGlmYWN0cy4KCiAgICBJbnB1dDogIGZpbGVzID0gWyhlbWl0dGVkX3BhdGgsIGJ5dGVzKSwgLi4uXQogICAgT3V0cHV0OiBkaWN0IG1hcHBpbmcgYXJ0aWZhY3QgcGF0aHMgLT4gSlNPTi1zZXJpYWxpemFibGUgcGF5bG9hZHMKICAgICIiIgoKICAgIGRlZiBhbmFseXplKHNlbGYsIGZpbGVzOiBMaXN0W1R1cGxlW3N0ciwgYnl0ZXNdXSkgLT4gRGljdFtzdHIsIEFueV06CiAgICAgICAgIyBDb252ZXJ0IGluY29taW5nIHR1cGxlcyB0byBGaWxlUmVjIG9iamVjdHMgZXhwZWN0ZWQgYnkgYW5hbHl6ZXJzCiAgICAgICAgZnJzOiBMaXN0W0ZpbGVSZWNdID0gW10KICAgICAgICBmb3IgcGF0aCwgZGF0YSBpbiBmaWxlczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnJzLmFwcGVuZChGaWxlUmVjKHBhdGg9cGF0aCwgZGF0YT1kYXRhLCBzaGEyNTY9aGFzaGxpYi5zaGEyNTYoZGF0YSkuaGV4ZGlnZXN0KCkpKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgIyBiZXN0LWVmZm9ydDogc2tpcCBtYWxmb3JtZWQgZW50cnkKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICMgUnVuIGFuYWx5c2VzIChweXRob25faW5kZXggJiBncmFwaHMgY29uc3VtZSBMaXN0W0ZpbGVSZWNdKQogICAgICAgIGxkdCA9IHBpZHguYnVpbGRfbGR0KGZycykKICAgICAgICBibG9ja3MgPSBwaWR4LmJ1aWxkX2Jsb2NrX2luZGV4KGZycykKICAgICAgICB0eXBlZF9hc3QgPSBwaWR4LmR1bXBfdHlwZWRfYXN0KGZycykKICAgICAgICB0b2tlbnMgPSBwaWR4LmR1bXBfdG9rZW5zKGZycykKCiAgICAgICAgc3ltYm9scyA9IGcuYnVpbGRfc3ltYm9sX3RhYmxlKGZycykKICAgICAgICBpbXBvcnRzID0gZy5idWlsZF9pbXBvcnRfZ3JhcGgoZnJzKQogICAgICAgIGNhbGxzID0gZy5idWlsZF9jYWxsX2dyYXBoKGZycywgc3ltYm9scykKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgImFuYWx5c2lzL2xkdC5qc29uIjogbGR0LAogICAgICAgICAgICAiYW5hbHlzaXMvYmxvY2tzLmpzb24iOiBibG9ja3MsCiAgICAgICAgICAgICJhbmFseXNpcy90eXBlZF9hc3QuanNvbiI6IHR5cGVkX2FzdCwKICAgICAgICAgICAgImFuYWx5c2lzL3Rva2Vucy5qc29uIjogdG9rZW5zLAogICAgICAgICAgICAiZ3JhcGhzL3N5bWJvbHMuanNvbiI6IHN5bWJvbHMsCiAgICAgICAgICAgICJncmFwaHMvaW1wb3J0cy5qc29uIjogaW1wb3J0cywKICAgICAgICAgICAgImdyYXBocy9jYWxscy5qc29uIjogY2FsbHMsCiAgICAgICAgfQo=", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/code_bundles/src/packager/languages/python/plugin.py", "sha256_chunk": "a2959f483bb7a40d2335504af9e84473e7e283fe419099770d99daf7042b9d3f", "sha256_file": "a2959f483bb7a40d2335504af9e84473e7e283fe419099770d99daf7042b9d3f", "type": "file_chunk"}
{"byte_end": 2974, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "IyBzdXBlcmJ1bmRsZV9wYWNrLnB5CmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYW5ub3RhdGlvbnMKCmltcG9ydCBiYXNlNjQKaW1wb3J0IGhhc2hsaWIKaW1wb3J0IGpzb24KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBBbnksIE1hcHBpbmcKCgpjbGFzcyBTdXBlcmJ1bmRsZVBhY2s6CiAgICAiIiIKICAgIFV0aWxpdGllcyBmb3IgZW1pdHRpbmcgYXJ0aWZhY3QgYnVuZGxlcyBpbiBKU09OTCBmb3JtIGFuZCBjb21wYW5pb24gU0hBMjU2U1VNUy4KICAgIE91dHB1dCBzaGFwZXMgYXJlIGlkZW50aWNhbCB0byB0aGUgb3JpZ2luYWwgbW9kdWxlLWxldmVsIGZ1bmN0aW9ucy4KICAgICIiIgoKICAgICMgLS0tLS0tLS0tLSBwdWJsaWMgQVBJIC0tLS0tLS0tLS0KCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgd3JpdGVfYXJ0aWZhY3RzX2J1bmRsZShwYXRoOiBQYXRoLCBhcnRpZmFjdHM6IE1hcHBpbmdbc3RyLCBBbnldKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIFdyaXRlIGEgSlNPTkwgYnVuZGxlIHdoZXJlIGVhY2ggbGluZSBpczoKICAgICAgICAgIHsidHlwZSI6ImZpbGUiLCJwYXRoIjo8cmVsPiwiY29udGVudF9iNjQiOjxiNjQ+LCJzaGEyNTYiOjxoZXg+fQogICAgICAgIFRoZSBwYXlsb2FkIGlzIHRoZSBVVEYtOCBKU09OIHNlcmlhbGl6YXRpb24gb2YgYXJ0aWZhY3RzW3JlbF0KICAgICAgICAoZW5zdXJlX2FzY2lpPUZhbHNlLCBzb3J0X2tleXM9VHJ1ZSksIGV4YWN0bHkgYXMgYmVmb3JlLgoKICAgICAgICBSYWlzZXM6CiAgICAgICAgICAgIFZhbHVlRXJyb3IgaWYgYW4gYXJ0aWZhY3QgY2Fubm90IGJlIEpTT04tc2VyaWFsaXplZC4KICAgICAgICAgICAgT1NFcnJvci9JT0Vycm9yIGZvciBmaWxlc3lzdGVtIHdyaXRlIGVycm9ycy4KICAgICAgICAiIiIKICAgICAgICBTdXBlcmJ1bmRsZVBhY2suX2Vuc3VyZV9wYXJlbnQocGF0aCkKICAgICAgICB3aXRoIG9wZW4ocGF0aCwgInciLCBlbmNvZGluZz0idXRmLTgiKSBhcyBmbzoKICAgICAgICAgICAgZm9yIHJlbCwgb2JqIGluIHNvcnRlZChhcnRpZmFjdHMuaXRlbXMoKSk6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZCA9IGpzb24uZHVtcHMob2JqLCBlbnN1cmVfYXNjaWk9RmFsc2UsIHNvcnRfa2V5cz1UcnVlKS5lbmNvZGUoInV0Zi04IikKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGYiRmFpbGVkIHRvIHNlcmlhbGl6ZSBhcnRpZmFjdCBhdCBwYXRoICd7cmVsfSc6IHtlfSIpIGZyb20gZQogICAgICAgICAgICAgICAgcmVjID0gewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImZpbGUiLAogICAgICAgICAgICAgICAgICAgICJwYXRoIjogcmVsLAogICAgICAgICAgICAgICAgICAgICJjb250ZW50X2I2NCI6IGJhc2U2NC5iNjRlbmNvZGUocGF5bG9hZCkuZGVjb2RlKCJhc2NpaSIpLAogICAgICAgICAgICAgICAgICAgICJzaGEyNTYiOiBoYXNobGliLnNoYTI1NihwYXlsb2FkKS5oZXhkaWdlc3QoKSwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvLndyaXRlKGpzb24uZHVtcHMocmVjLCBlbnN1cmVfYXNjaWk9RmFsc2UsIHNvcnRfa2V5cz1UcnVlKSArICJcbiIpCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIHdyaXRlX3NoYTI1NnN1bXMocGF0aDogUGF0aCwgYXJ0aWZhY3RzOiBNYXBwaW5nW3N0ciwgQW55XSkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICBXcml0ZSBhIFNIQTI1NlNVTVMgZmlsZSB3aXRoIGxpbmVzIG9mIHRoZSBmb3JtOgogICAgICAgICAgPHNoYTI1NihoZXgpPiAgPHJlbD4KICAgICAgICB3aGVyZSB0aGUgaGFzaCBpcyBjb21wdXRlZCBvdmVyIHRoZSBVVEYtOCBKU09OIHNlcmlhbGl6YXRpb24gb2YKICAgICAgICBhcnRpZmFjdHNbcmVsXSAoZW5zdXJlX2FzY2lpPUZhbHNlLCBzb3J0X2tleXM9VHJ1ZSkuCiAgICAgICAgIiIiCiAgICAgICAgU3VwZXJidW5kbGVQYWNrLl9lbnN1cmVfcGFyZW50KHBhdGgpCiAgICAgICAgd2l0aCBvcGVuKHBhdGgsICJ3IiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZm86CiAgICAgICAgICAgIGZvciByZWwsIG9iaiBpbiBzb3J0ZWQoYXJ0aWZhY3RzLml0ZW1zKCkpOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKG9iaiwgZW5zdXJlX2FzY2lpPUZhbHNlLCBzb3J0X2tleXM9VHJ1ZSkuZW5jb2RlKCJ1dGYtOCIpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmIkZhaWxlZCB0byBzZXJpYWxpemUgYXJ0aWZhY3QgYXQgcGF0aCAne3JlbH0nOiB7ZX0iKSBmcm9tIGUKICAgICAgICAgICAgICAgIGZvLndyaXRlKGYie2hhc2hsaWIuc2hhMjU2KHBheWxvYWQpLmhleGRpZ2VzdCgpfSAge3JlbH1cbiIpCgogICAgIyAtLS0tLS0tLS0tIGludGVybmFscyAtLS0tLS0tLS0tCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9lbnN1cmVfcGFyZW50KHA6IFBhdGgpIC0+IE5vbmU6CiAgICAgICAgcC5wYXJlbnQubWtkaXIocGFyZW50cz1UcnVlLCBleGlzdF9vaz1UcnVlKQoKCiMgLS0tLS0tLS0tLSBsZWdhY3kgc2hpbXMgKGJhY2t3YXJkcy1jb21wYXRpYmxlIEFQSSkgLS0tLS0tLS0tLQoKZGVmIHdyaXRlX2FydGlmYWN0c19idW5kbGUocGF0aDogUGF0aCwgYXJ0aWZhY3RzOiBNYXBwaW5nW3N0ciwgQW55XSkgLT4gTm9uZToKICAgIFN1cGVyYnVuZGxlUGFjay53cml0ZV9hcnRpZmFjdHNfYnVuZGxlKHBhdGgsIGFydGlmYWN0cykKCmRlZiB3cml0ZV9zaGEyNTZzdW1zKHBhdGg6IFBhdGgsIGFydGlmYWN0czogTWFwcGluZ1tzdHIsIEFueV0pIC0+IE5vbmU6CiAgICBTdXBlcmJ1bmRsZVBhY2sud3JpdGVfc2hhMjU2c3VtcyhwYXRoLCBhcnRpZmFjdHMpCg==", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/code_bundles/superbundle_pack.py", "sha256_chunk": "d51fb0f99bd274c0992259da8e9a0b1c47b9ad92e36c6d857a72fbba4bea2fec", "sha256_file": "d51fb0f99bd274c0992259da8e9a0b1c47b9ad92e36c6d857a72fbba4bea2fec", "type": "file_chunk"}
{"byte_end": 0, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/packers/__init__.py", "sha256_chunk": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "sha256_file": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "type": "file_chunk"}
{"byte_end": 2118, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucw0KaW1wb3J0IGJhc2U2NCwgaGFzaGxpYiwganNvbiwgc3lzDQpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgNCg0KI1JPT1QgPSBQYXRoKF9fZmlsZV9fKS5yZXNvbHZlKCkucGFyZW50c1sxXSAvICJ0ZXN0c19hZGhvYyIgLyAicGF0Y2hfbG9vcF90ZXN0MiIgICAjIGFkanVzdCBpZiBuZWVkZWQNCiNPVVQgID0gUGF0aChfX2ZpbGVfXykucmVzb2x2ZSgpLnBhcmVudHNbMF0gLyAib3V0cHV0IiAvICJjb2RlX2J1bmRsZXMiLyAiY29kZV9idW5kbGUuanNvbmwiDQojU1VNUyA9IFBhdGgoX19maWxlX18pLnJlc29sdmUoKS5wYXJlbnRzWzBdIC8gIm91dHB1dCIgLyAiY29kZV9idW5kbGVzIi8gImNvZGVfYnVuZGxlLlNIQTI1NlNVTVMiDQoNClJPT1QgPSBQYXRoKCJDOlxcVXNlcnNcXGNnMzcxXFxQeWNoYXJtUHJvamVjdHNcXENoYXRHUFQgQm90XFx2MlxcYmFja2VuZFxcY29yZVxcdXRpbHNcXGNvZGVfYnVuZGxlc1xcY29kZV9idW5kbGVzXFwiKSAgICMgYWRqdXN0IGlmIG5lZWRlZA0KT1VUICA9IFBhdGgoIi9vdXRwdXQvb3V0cHV0X2NvZGVfYnVuZGxlc1xcY29kZV9idW5kbGUuanNvbmwiKQ0KU1VNUyA9IFBhdGgoIi9vdXRwdXQvb3V0cHV0X2NvZGVfYnVuZGxlc1xcY29kZV9idW5kbGUuU0hBMjU2U1VNUyIpDQoNCkVYQ0xVREVfRElSUyA9IHsiLmdpdCIsICJfX3B5Y2FjaGVfXyIsICIubXlweV9jYWNoZSIsICIucHl0ZXN0X2NhY2hlIiwgIm91dHB1dCIsICJkaXN0IiwgImJ1aWxkIiwgIi52ZW52IiwgInZlbnYifQ0KRVhDTFVERV9FWFRTID0geyIucHljIiwgIi5weW8iLCAiLnB5ZCIsICIubG9nIn0NCg0KZGVmIHNoYTI1Nl9ieXRlcyhkYXRhOiBieXRlcykgLT4gc3RyOg0KICAgIHJldHVybiBoYXNobGliLnNoYTI1NihkYXRhKS5oZXhkaWdlc3QoKQ0KDQpkZWYgbWFpbigpOg0KICAgIHJvb3QgPSBST09UDQogICAgZmlsZXMgPSBbXQ0KICAgIGZvciBwIGluIHJvb3Qucmdsb2IoIioiKToNCiAgICAgICAgaWYgcC5pc19kaXIoKToNCiAgICAgICAgICAgIGlmIHAubmFtZSBpbiBFWENMVURFX0RJUlM6DQogICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICMgc2tpcCBleGNsdWRlZCBhbmNlc3RvcnMNCiAgICAgICAgICAgIGlmIGFueShwYXJ0IGluIEVYQ0xVREVfRElSUyBmb3IgcGFydCBpbiBwLnJlbGF0aXZlX3RvKHJvb3QpLnBhcnRzKToNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgaWYgcC5zdWZmaXgubG93ZXIoKSBpbiBFWENMVURFX0VYVFM6DQogICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICByZWwgPSBwLnJlbGF0aXZlX3RvKHJvb3QpLmFzX3Bvc2l4KCkNCiAgICAgICAgYiA9IHAucmVhZF9ieXRlcygpDQogICAgICAgIHJlY29yZCA9IHsNCiAgICAgICAgICAgICJwYXRoIjogcmVsLA0KICAgICAgICAgICAgInNoYTI1NiI6IHNoYTI1Nl9ieXRlcyhiKSwNCiAgICAgICAgICAgICJtb2RlIjogInRleHQiLA0KICAgICAgICAgICAgImNvbnRlbnRfYjY0IjogYmFzZTY0LmI2NGVuY29kZShiKS5kZWNvZGUoImFzY2lpIiksDQogICAgICAgIH0NCiAgICAgICAgZmlsZXMuYXBwZW5kKHJlY29yZCkNCg0KICAgIE9VVC5wYXJlbnQubWtkaXIocGFyZW50cz1UcnVlLCBleGlzdF9vaz1UcnVlKQ0KICAgIHdpdGggT1VULm9wZW4oInciLCBlbmNvZGluZz0idXRmLTgiLCBuZXdsaW5lPSJcbiIpIGFzIGY6DQogICAgICAgIGZvciByZWMgaW4gZmlsZXM6DQogICAgICAgICAgICBmLndyaXRlKGpzb24uZHVtcHMocmVjLCBlbnN1cmVfYXNjaWk9RmFsc2UpICsgIlxuIikNCg0KICAgIHdpdGggU1VNUy5vcGVuKCJ3IiwgZW5jb2Rpbmc9InV0Zi04IiwgbmV3bGluZT0iXG4iKSBhcyBmOg0KICAgICAgICBmb3IgcmVjIGluIGZpbGVzOg0KICAgICAgICAgICAgZi53cml0ZShmIntyZWNbJ3NoYTI1NiddfSAge3JlY1sncGF0aCddfVxuIikNCg0KICAgIHByaW50KGYiW29rXSB3cm90ZSB7bGVuKGZpbGVzKX0gZmlsZXMg4oaSIHtPVVR9IikNCiAgICBwcmludChmIltva10gY2hlY2tzdW1zIOKGkiB7U1VNU30iKQ0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIG1haW4oKQ0K", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/packers/make_code_bundle.py", "sha256_chunk": "f137dfab93fa5bc99a6ada54995def1fb74c73f6442a2f1b1a68cfac721bcb63", "sha256_file": "f137dfab93fa5bc99a6ada54995def1fb74c73f6442a2f1b1a68cfac721bcb63", "type": "file_chunk"}
{"byte_end": 5870, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMw0KZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucw0KaW1wb3J0IGJhc2U2NCwgaGFzaGxpYiwganNvbg0KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQoNCiMgLS0tLS0tLS0gaGFyZGNvZGVkIGNvbmZpZyAoeW91cnMpIC0tLS0tLS0tDQpJTlBVVF9CVU5ETEUgPSByIkM6XFVzZXJzXGNnMzcxXFB5Y2hhcm1Qcm9qZWN0c1xDaGF0R1BUIEJvdFx0ZXN0c19hZGhvY1xvdXRwdXRcZG93bmxvYWRlZF9jb2RlX2J1bmRsZXNcY2xhc3NfYmFzZWRfc291cmNlX2J1bmRsZV8yMDI1MDgxNl8yMjI4MDEuanNvbmwiDQpERVNUX1JPT1QgICA9IFBhdGgociJDOlxVc2Vyc1xjZzM3MVxQeWNoYXJtUHJvamVjdHNcQ2hhdEdQVCBCb3RcdGVzdHNfYWRob2Ncb3V0cHV0XGRvd25sb2FkZWRfY29kZV9idW5kbGVzIikucmVzb2x2ZSgpDQpTVFJJQ1QgPSBGYWxzZQ0KIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQpkZWYgc2hhMjU2X2J5dGVzKGI6IGJ5dGVzKSAtPiBzdHI6DQogICAgcmV0dXJuIGhhc2hsaWIuc2hhMjU2KGIpLmhleGRpZ2VzdCgpDQoNCmRlZiBlbnN1cmVfcmVsYXRpdmVfc2FmZShyZWw6IHN0cikgLT4gUGF0aDoNCiAgICBwID0gUGF0aChyZWwucmVwbGFjZSgiXFwiLCAiLyIpKQ0KICAgIGlmIHAuaXNfYWJzb2x1dGUoKTogcmFpc2UgVmFsdWVFcnJvcihmImFic29sdXRlIHBhdGggbm90IGFsbG93ZWQ6IHtyZWx9IikNCiAgICBpZiBhbnkocGFydCA9PSAiLi4iIGZvciBwYXJ0IGluIHAucGFydHMpOiByYWlzZSBWYWx1ZUVycm9yKGYicGFyZW50IHRyYXZlcnNhbCBub3QgYWxsb3dlZDoge3JlbH0iKQ0KICAgIGlmIHAucGFydHMgYW5kIHAucGFydHNbMF0uZW5kc3dpdGgoIjoiKTogcmFpc2UgVmFsdWVFcnJvcihmImRyaXZlLXF1YWxpZmllZCBwYXRoIG5vdCBhbGxvd2VkOiB7cmVsfSIpDQogICAgcmV0dXJuIHANCg0KZGVmIGRldGVjdF9idW5kbGVfdHlwZShwYXRoOiBQYXRoKSAtPiBzdHI6DQogICAgaGVhZCA9IHBhdGgucmVhZF9ieXRlcygpWzo1MTJdDQogICAgaWYgaGVhZC5zdGFydHN3aXRoKGIiUEtceDAzXHgwNCIpOiByZXR1cm4gInppcCINCiAgICB0eHQgPSBoZWFkLmRlY29kZSgidXRmLTgiLCBlcnJvcnM9Imlnbm9yZSIpLmxzdHJpcCgiXHVmZWZmIikubHN0cmlwKCkNCiAgICBpZiB0eHQuc3RhcnRzd2l0aCgieyIpOiByZXR1cm4gImpzb25sIg0KICAgICMgNjQgaGV4ICsgdHdvIHNwYWNlcyArIHBhdGgg4oaSIHN1bXMNCiAgICBpbXBvcnQgcmUNCiAgICBpZiByZS5tYXRjaChyIl5bMC05YS1mQS1GXXs2NH1cc1xzXFMiLCB0eHQpOiByZXR1cm4gInNoYTI1NnN1bXMiDQogICAgcmV0dXJuICJ1bmtub3duIg0KDQpkZWYgaXRlcl9qc29uX29iamVjdHMocmF3OiBzdHIpOg0KICAgICIiIllpZWxkIEpTT04gb2JqZWN0IHN0cmluZ3MgYnkgc2Nhbm5pbmcgZm9yIGJhbGFuY2VkIGJyYWNlcywgaWdub3JpbmcgYnJhY2VzIGluIHN0cmluZ3MuIiIiDQogICAgaSwgbiA9IDAsIGxlbihyYXcpDQogICAgZGVwdGggPSAwDQogICAgc3RhcnQgPSAtMQ0KICAgIGluX3N0ciA9IEZhbHNlDQogICAgZXNjID0gRmFsc2UNCiAgICB3aGlsZSBpIDwgbjoNCiAgICAgICAgY2ggPSByYXdbaV0NCiAgICAgICAgaWYgaW5fc3RyOg0KICAgICAgICAgICAgaWYgZXNjOg0KICAgICAgICAgICAgICAgIGVzYyA9IEZhbHNlDQogICAgICAgICAgICBlbGlmIGNoID09ICJcXCI6DQogICAgICAgICAgICAgICAgZXNjID0gVHJ1ZQ0KICAgICAgICAgICAgZWxpZiBjaCA9PSAnIic6DQogICAgICAgICAgICAgICAgaW5fc3RyID0gRmFsc2UNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGlmIGNoID09ICciJzoNCiAgICAgICAgICAgICAgICBpbl9zdHIgPSBUcnVlDQogICAgICAgICAgICBlbGlmIGNoID09ICd7JzoNCiAgICAgICAgICAgICAgICBpZiBkZXB0aCA9PSAwOg0KICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGkNCiAgICAgICAgICAgICAgICBkZXB0aCArPSAxDQogICAgICAgICAgICBlbGlmIGNoID09ICd9JzoNCiAgICAgICAgICAgICAgICBpZiBkZXB0aCA+IDA6DQogICAgICAgICAgICAgICAgICAgIGRlcHRoIC09IDENCiAgICAgICAgICAgICAgICAgICAgaWYgZGVwdGggPT0gMCBhbmQgc3RhcnQgIT0gLTE6DQogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCByYXdbc3RhcnQ6aSsxXQ0KICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSAtMQ0KICAgICAgICBpICs9IDENCg0KZGVmIHVucGFjayhidW5kbGU6IFBhdGgsIHN0cmljdDogYm9vbCA9IEZhbHNlKSAtPiB0dXBsZVtpbnQsIGludCwgZGljdF06DQogICAga2luZCA9IGRldGVjdF9idW5kbGVfdHlwZShidW5kbGUpDQogICAgaWYga2luZCAhPSAianNvbmwiOg0KICAgICAgICByYWlzZSBTeXN0ZW1FeGl0KA0KICAgICAgICAgICAgZiJbZmF0YWxdIGV4cGVjdGVkIGEgSlNPTkwgYnVuZGxlIGJ1dCBkZXRlY3RlZCAne2tpbmR9Jy4gIg0KICAgICAgICAgICAgIlVzZSB0aGUgKmNvZGVfYnVuZGxlLmpzb25sKiwgbm90IHRoZSAuemlwIG9yIC5TSEEyNTZTVU1TLiINCiAgICAgICAgKQ0KDQogICAgZGF0YSA9IGJ1bmRsZS5yZWFkX2J5dGVzKCkNCiAgICBwcmludChmIltpbmZvXSBmaWxlIHNpemU6IHtsZW4oZGF0YSl9IGJ5dGVzIikNCiAgICBwcmludChmIltpbmZvXSBoZWFkKDEyMCk6IHtkYXRhWzoxMjBdIXJ9IikNCg0KICAgIHRleHQgPSBkYXRhLmRlY29kZSgidXRmLTgiLCBlcnJvcnM9Imlnbm9yZSIpDQogICAgaWYgdGV4dCBhbmQgdGV4dFswXSA9PSAiXHVmZWZmIjogICMgc3RyaXAgQk9NDQogICAgICAgIHRleHQgPSB0ZXh0LmxzdHJpcCgiXHVmZWZmIikNCg0KICAgIERFU1RfUk9PVC5ta2RpcihwYXJlbnRzPVRydWUsIGV4aXN0X29rPVRydWUpDQogICAgZGlyc19jcmVhdGVkID0gMA0KICAgIGZpbGVzX3dyaXR0ZW4gPSAwDQogICAgc3RhdHMgPSB7Im1ldGEiOiAwLCAiZGlyIjogMCwgImZpbGUiOiAwLCAic2tpcHBlZCI6IDB9DQoNCiAgICBmb3VuZF9hbnkgPSBGYWxzZQ0KICAgIGZvciBvYmpfc3RyIGluIGl0ZXJfanNvbl9vYmplY3RzKHRleHQpOg0KICAgICAgICBmb3VuZF9hbnkgPSBUcnVlDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHJlYyA9IGpzb24ubG9hZHMob2JqX3N0cikNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoNCiAgICAgICAgICAgIHN0YXRzWyJza2lwcGVkIl0gKz0gMQ0KICAgICAgICAgICAgY29udGludWUNCg0KICAgICAgICBydHlwZSA9IHJlYy5nZXQoInR5cGUiKQ0KICAgICAgICBpZiBydHlwZSA9PSAibWV0YSI6DQogICAgICAgICAgICBzdGF0c1sibWV0YSJdICs9IDENCiAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgaWYgcnR5cGUgPT0gImRpciI6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcmVsID0gZW5zdXJlX3JlbGF0aXZlX3NhZmUocmVjWyJwYXRoIl0ucnN0cmlwKCIvIikpDQogICAgICAgICAgICAgICAgb3V0X2RpciA9IChERVNUX1JPT1QgLyByZWwpLnJlc29sdmUoKQ0KICAgICAgICAgICAgICAgIGlmIERFU1RfUk9PVCBub3QgaW4gb3V0X2Rpci5wYXJlbnRzIGFuZCBvdXRfZGlyICE9IERFU1RfUk9PVDoNCiAgICAgICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigidW5zYWZlIGRpciBwYXRoIGVzY2FwZXMgZGVzdCIpDQogICAgICAgICAgICAgICAgb3V0X2Rpci5ta2RpcihwYXJlbnRzPVRydWUsIGV4aXN0X29rPVRydWUpDQogICAgICAgICAgICAgICAgZGlyc19jcmVhdGVkICs9IDENCiAgICAgICAgICAgICAgICBzdGF0c1siZGlyIl0gKz0gMQ0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgIHByaW50KGYiW3dhcm5dIGRpciAne3JlYy5nZXQoJ3BhdGgnKX0nOiB7ZX0iKQ0KICAgICAgICAgICAgY29udGludWUNCg0KICAgICAgICBpZiBydHlwZSA9PSAiZmlsZSI6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcmVsID0gZW5zdXJlX3JlbGF0aXZlX3NhZmUocmVjWyJwYXRoIl0pDQogICAgICAgICAgICAgICAgb3V0X3BhdGggPSAoREVTVF9ST09UIC8gcmVsKS5yZXNvbHZlKCkNCiAgICAgICAgICAgICAgICBpZiBERVNUX1JPT1Qgbm90IGluIG91dF9wYXRoLnBhcmVudHM6DQogICAgICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoInVuc2FmZSBmaWxlIHBhdGggZXNjYXBlcyBkZXN0IikNCiAgICAgICAgICAgICAgICBiNjQgPSByZWMuZ2V0KCJjb250ZW50X2I2NCIpDQogICAgICAgICAgICAgICAgaWYgYjY0IGlzIE5vbmU6DQogICAgICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIm1pc3NpbmcgY29udGVudF9iNjQiKQ0KICAgICAgICAgICAgICAgIGJsb2IgPSBiYXNlNjQuYjY0ZGVjb2RlKGI2NCkNCiAgICAgICAgICAgICAgICB3YW50X3NoYSA9IHJlYy5nZXQoInNoYTI1NiIpIG9yICIiDQogICAgICAgICAgICAgICAgZ290X3NoYSA9IHNoYTI1Nl9ieXRlcyhibG9iKQ0KICAgICAgICAgICAgICAgIGlmIHdhbnRfc2hhIGFuZCB3YW50X3NoYSAhPSBnb3Rfc2hhOg0KICAgICAgICAgICAgICAgICAgICBtc2cgPSBmIlt3YXJuXSBjaGVja3N1bSBtaXNtYXRjaCBmb3Ige3JlbH06IHdhbnQge3dhbnRfc2hhfSwgZ290IHtnb3Rfc2hhfSINCiAgICAgICAgICAgICAgICAgICAgaWYgc3RyaWN0OiByYWlzZSBWYWx1ZUVycm9yKCJjaGVja3N1bSBtaXNtYXRjaCAoc3RyaWN0IG1vZGUpIikNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQobXNnICsgIiDigJQgd3JpdGluZyBhbnl3YXkiKQ0KICAgICAgICAgICAgICAgIG91dF9wYXRoLnBhcmVudC5ta2RpcihwYXJlbnRzPVRydWUsIGV4aXN0X29rPVRydWUpDQogICAgICAgICAgICAgICAgb3V0X3BhdGgud3JpdGVfYnl0ZXMoYmxvYikNCiAgICAgICAgICAgICAgICBmaWxlc193cml0dGVuICs9IDENCiAgICAgICAgICAgICAgICBzdGF0c1siZmlsZSJdICs9IDENCiAgICAgICAgICAgICAgICBpZiBmaWxlc193cml0dGVuIDw9IDM6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiW3dyaXRlXSB7b3V0X3BhdGh9IikNCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgICAgICBwcmludChmIlt3YXJuXSBmaWxlICd7cmVjLmdldCgncGF0aCcpfSc6IHtlfSIpDQogICAgICAgICAgICBjb250aW51ZQ0KDQogICAgICAgIHN0YXRzWyJza2lwcGVkIl0gKz0gMQ0KDQogICAgaWYgbm90IGZvdW5kX2FueToNCiAgICAgICAgcHJpbnQoIlt3YXJuXSBubyBKU09OIG9iamVjdHMgZm91bmQuIFRoaXMgdXN1YWxseSBtZWFucyB0aGUgaW5wdXQgaXMgbm90IHRoZSBjb2RlX2J1bmRsZS5qc29ubC4iKQ0KDQogICAgcmV0dXJuIGRpcnNfY3JlYXRlZCwgZmlsZXNfd3JpdHRlbiwgc3RhdHMNCg0KZGVmIG1haW4oKSAtPiBpbnQ6DQogICAgYnVuZGxlID0gUGF0aChJTlBVVF9CVU5ETEUpDQogICAgaWYgbm90IGJ1bmRsZS5pc19maWxlKCk6DQogICAgICAgIHJhaXNlIFN5c3RlbUV4aXQoZiJbZmF0YWxdIGJ1bmRsZSBub3QgZm91bmQ6IHtidW5kbGV9IikNCiAgICBwcmludChmIltpbmZvXSByZWFkaW5nIGJ1bmRsZToge2J1bmRsZX0iKQ0KICAgIHByaW50KGYiW2luZm9dIHdyaXRpbmcgdW5kZXI6IHtERVNUX1JPT1R9IikNCiAgICBkLCBmLCBzdGF0cyA9IHVucGFjayhidW5kbGUsIHN0cmljdD1TVFJJQ1QpDQogICAgcHJpbnQoZiJbZG9uZV0gY3JlYXRlZCB7ZH0gZGlycywgd3JvdGUge2Z9IGZpbGVzIikNCiAgICBwcmludChmIltzdGF0c10ge3N0YXRzfSIpDQogICAgcmV0dXJuIDANCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICByYWlzZSBTeXN0ZW1FeGl0KG1haW4oKSkNCg0KDQo=", "path": "output/patch_code_bundles/backend/core/utils/code_bundles/packers/unpack_code_bundle.py", "sha256_chunk": "e8824834caa54af557ea67d13c22ce67692f0d2a49f653241041be07fbc08f6e", "sha256_file": "e8824834caa54af557ea67d13c22ce67692f0d2a49f653241041be07fbc08f6e", "type": "file_chunk"}
{"byte_end": 29, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "IiIiRmlsZXN5c3RlbSBJTyBoZWxwZXJzLiIiIgo=", "path": "output/patch_code_bundles/backend/core/utils/code_fixers/__init__.py", "sha256_chunk": "b106b593b9f0919ce28703401a8686f8deceef86b4c5652cf7d73b9cb49803b5", "sha256_file": "b106b593b9f0919ce28703401a8686f8deceef86b4c5652cf7d73b9cb49803b5", "type": "file_chunk"}
{"byte_end": 13636, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/code_fixers/change_imports.py", "sha256_chunk": "12d250b9743533f256daeb600e90717bf8a3db0ff05e49107d9a6772462e922e", "sha256_file": "12d250b9743533f256daeb600e90717bf8a3db0ff05e49107d9a6772462e922e", "type": "file_chunk"}
{"byte_end": 0, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/db/__init__.py", "sha256_chunk": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "sha256_file": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "type": "file_chunk"}
{"byte_end": 2042, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "aW1wb3J0IG9zDQppbXBvcnQgcmUNCmltcG9ydCBzcWxpdGUzDQoNCkJBU0VfRElSID0gIi9kYXRhYmFzZXNcXCINCkRCX1BBVEggPSBvcy5wYXRoLmpvaW4oQkFTRV9ESVIsICJib3RfZGV2LmRiIikNClNDSEVNQV9ESVIgPSAiL3NjcmlwdHMvc3FsaXRlX3NxbF9zY2hlbWFzXFwiDQoNClJFUVVJUkVEX1RBQkxFUyA9IHsNCiAgICAiYWdlbnRfaW5zaWdodHMiOiAiMDAzX2NyZWF0ZV9hZ2VudF9pbnNpZ2h0cy5zcWwiLA0KICAgICJkaWFnbm9zdGljcyI6ICIwMDRfY3JlYXRlX2RpYWdub3N0aWNzLnNxbCIsDQogICAgImludHJvc3BlY3Rpb25faW5kZXgiOiAiMDQzX2NyZWF0ZV9pbnRyb3NwZWN0aW9uX2luZGV4LnNxbCIsDQp9DQoNCg0KZGVmIGRiX2V4aXN0cyhwYXRoOiBzdHIpIC0+IGJvb2w6DQogICAgcmV0dXJuIG9zLnBhdGguaXNmaWxlKHBhdGgpDQoNCg0KZGVmIHRhYmxlX2V4aXN0cyhjb25uOiBzcWxpdGUzLkNvbm5lY3Rpb24sIHRhYmxlX25hbWU6IHN0cikgLT4gYm9vbDoNCiAgICBjdXJzb3IgPSBjb25uLmV4ZWN1dGUoDQogICAgICAgICJTRUxFQ1QgbmFtZSBGUk9NIHNxbGl0ZV9tYXN0ZXIgV0hFUkUgdHlwZT0ndGFibGUnIEFORCBuYW1lPT87IiwgKHRhYmxlX25hbWUsKQ0KICAgICkNCiAgICByZXR1cm4gY3Vyc29yLmZldGNob25lKCkgaXMgbm90IE5vbmUNCg0KDQpkZWYgcnVuX3NxbF9maWxlKGNvbm46IHNxbGl0ZTMuQ29ubmVjdGlvbiwgc3FsX3BhdGg6IHN0cik6DQogICAgd2l0aCBvcGVuKHNxbF9wYXRoLCAiciIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6DQogICAgICAgIHNxbF9zY3JpcHQgPSBmLnJlYWQoKQ0KDQogICAgIyBTdHJpcCBtYW51YWwgQkVHSU4vQ09NTUlUIHRvIGF2b2lkIGNvbmZsaWN0cw0KICAgIGNsZWFuZWRfc3FsID0gcmUuc3ViKHInXGJCRUdJTlxzKjtccyonLCAnJywgc3FsX3NjcmlwdCwgZmxhZ3M9cmUuSUdOT1JFQ0FTRSkNCiAgICBjbGVhbmVkX3NxbCA9IHJlLnN1YihyJ1xiQ09NTUlUXHMqO1xzKicsICcnLCBjbGVhbmVkX3NxbCwgZmxhZ3M9cmUuSUdOT1JFQ0FTRSkNCg0KICAgIGNvbm4uZXhlY3V0ZXNjcmlwdChjbGVhbmVkX3NxbCkNCiAgICBwcmludChmIuKchSBFeGVjdXRlZDoge29zLnBhdGguYmFzZW5hbWUoc3FsX3BhdGgpfSIpDQoNCg0KDQpkZWYgaW5pdF9kYXRhYmFzZSgpOg0KICAgIGRiX2NyZWF0ZWQgPSBGYWxzZQ0KICAgIGlmIG5vdCBkYl9leGlzdHMoREJfUEFUSCk6DQogICAgICAgIHByaW50KGYi8J+TgiBDcmVhdGluZyBTUUxpdGUgREIgYXQge0RCX1BBVEh9IikNCiAgICAgICAgZGJfY3JlYXRlZCA9IFRydWUNCiAgICBlbHNlOg0KICAgICAgICBwcmludChmIvCfk4EgVXNpbmcgZXhpc3RpbmcgREI6IHtEQl9QQVRIfSIpDQoNCiAgICBjb25uID0gc3FsaXRlMy5jb25uZWN0KERCX1BBVEgpDQoNCiAgICBmb3IgdGFibGUsIHNxbF9maWxlIGluIFJFUVVJUkVEX1RBQkxFUy5pdGVtcygpOg0KICAgICAgICBpZiBub3QgdGFibGVfZXhpc3RzKGNvbm4sIHRhYmxlKToNCiAgICAgICAgICAgIHNxbF9wYXRoID0gb3MucGF0aC5qb2luKFNDSEVNQV9ESVIsIHNxbF9maWxlKQ0KICAgICAgICAgICAgcHJpbnQoZiLinpUgVGFibGUgJ3t0YWJsZX0nIG5vdCBmb3VuZCDigJQgYXBwbHlpbmc6IHtzcWxfZmlsZX0iKQ0KICAgICAgICAgICAgcnVuX3NxbF9maWxlKGNvbm4sIHNxbF9wYXRoKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcHJpbnQoZiLinJTvuI8gVGFibGUgJ3t0YWJsZX0nIGFscmVhZHkgZXhpc3RzIikNCg0KICAgICMg4p2MIFJFTU9WRSBUSElTOg0KICAgICMgY29ubi5jb21taXQoKQ0KDQogICAgY29ubi5jbG9zZSgpDQoNCiAgICBpZiBkYl9jcmVhdGVkOg0KICAgICAgICBwcmludCgi8J+OiSBTUUxpdGUgZGF0YWJhc2UgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5LiIpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoIvCflIQgU1FMaXRlIGRhdGFiYXNlIGNoZWNrZWQgYW5kIHVwLXRvLWRhdGUuIikNCg0KDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgaW5pdF9kYXRhYmFzZSgpDQo=", "path": "output/patch_code_bundles/backend/core/utils/db/init_sqlite_dev.py", "sha256_chunk": "8e02386dc6e7157f069b8e7e77a13e19f347b6c95fafbec3749815e73fe85543", "sha256_file": "8e02386dc6e7157f069b8e7e77a13e19f347b6c95fafbec3749815e73fe85543", "type": "file_chunk"}
{"byte_end": 11190, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/db/load_sqlite_vector_plugin.py", "sha256_chunk": "8b8ee98e189a66e0d77ad29c6ebaa048a3fbfdf4a48bc588f8d707b16dfc927a", "sha256_file": "8b8ee98e189a66e0d77ad29c6ebaa048a3fbfdf4a48bc588f8d707b16dfc927a", "type": "file_chunk"}
{"byte_end": 2922, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "aW1wb3J0IHN1YnByb2Nlc3MNCmltcG9ydCBzcWxpdGUzDQppbXBvcnQgb3MNCmltcG9ydCBzeXMNCmltcG9ydCBydW5weQ0KaW1wb3J0IHRraW50ZXIgYXMgdGsNCmZyb20gdGtpbnRlciBpbXBvcnQgbWVzc2FnZWJveA0KDQpjbGFzcyBTUUxpdGVXZWJXcmFwcGVyR1VJOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgIyDinIUgSGFyZGNvZGUgeW91ciBTUUxpdGUgREIgcGF0aCBoZXJlOg0KICAgICAgICBzZWxmLmRiX3BhdGggPSAiL2RhdGFiYXNlcy9ib3RfZGV2LmRiIg0KICAgICAgICBzZWxmLnRhYmxlcyA9IFtdDQogICAgICAgIHN5cy5hcmd2ID0gWyJzcWxpdGVfd2ViIiwgc2VsZi5kYl9wYXRoXQ0KDQogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhzZWxmLmRiX3BhdGgpOg0KICAgICAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgZiJEYXRhYmFzZSBmaWxlIG5vdCBmb3VuZDpcbntzZWxmLmRiX3BhdGh9IikNCiAgICAgICAgICAgIHN5cy5leGl0KDEpDQoNCiAgICBkZWYgbGlzdF90YWJsZXMoc2VsZik6DQogICAgICAgICIiIlJldHJpZXZlIGFsbCB0YWJsZSBuYW1lcyBpbiB0aGUgc2VsZWN0ZWQgREIuIiIiDQogICAgICAgIGNvbm4gPSBzcWxpdGUzLmNvbm5lY3Qoc2VsZi5kYl9wYXRoKQ0KICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpDQogICAgICAgIGN1cnNvci5leGVjdXRlKA0KICAgICAgICAgICAgIlNFTEVDVCBuYW1lIEZST00gc3FsaXRlX21hc3RlciBXSEVSRSB0eXBlPSd0YWJsZScgT1JERVIgQlkgbmFtZTsiDQogICAgICAgICkNCiAgICAgICAgc2VsZi50YWJsZXMgPSBbcm93WzBdIGZvciByb3cgaW4gY3Vyc29yLmZldGNoYWxsKCldDQogICAgICAgIGNvbm4uY2xvc2UoKQ0KICAgICAgICBpZiBub3Qgc2VsZi50YWJsZXM6DQogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dpbmZvKCJJbmZvIiwgIk5vIHRhYmxlcyBmb3VuZCBpbiB0aGUgZGF0YWJhc2UuIikNCiAgICAgICAgICAgIHN5cy5leGl0KDEpDQoNCiAgICBkZWYgcHJvbXB0X3RhYmxlX3NlbGVjdGlvbihzZWxmKToNCiAgICAgICAgIiIiU2hvdyBhIGxpc3Rib3ggZm9yIHNlbGVjdGluZyB3aGljaCB0YWJsZXMgdG8gdmlldy4iIiINCiAgICAgICAgc2VsZWN0ZWQgPSBbXQ0KDQogICAgICAgIGRlZiBvbl9zdWJtaXQoKToNCiAgICAgICAgICAgIHNlbGVjdGVkX2luZGljZXMgPSBsaXN0Ym94LmN1cnNlbGVjdGlvbigpDQogICAgICAgICAgICBmb3IgaSBpbiBzZWxlY3RlZF9pbmRpY2VzOg0KICAgICAgICAgICAgICAgIHNlbGVjdGVkLmFwcGVuZChzZWxmLnRhYmxlc1tpXSkNCiAgICAgICAgICAgIHdpbmRvdy5kZXN0cm95KCkNCg0KICAgICAgICB3aW5kb3cgPSB0ay5UaygpDQogICAgICAgIHdpbmRvdy50aXRsZSgiU2VsZWN0IFRhYmxlcyIpDQogICAgICAgIHdpbmRvdy5nZW9tZXRyeSgiMzAweDQwMCIpDQoNCiAgICAgICAgbGFiZWwgPSB0ay5MYWJlbCh3aW5kb3csIHRleHQ9IlNlbGVjdCB0YWJsZXMgdG8gdmlldyBpbiBzcWxpdGUtd2ViOiIpDQogICAgICAgIGxhYmVsLnBhY2socGFkeT0xMCkNCg0KICAgICAgICBsaXN0Ym94ID0gdGsuTGlzdGJveCh3aW5kb3csIHNlbGVjdG1vZGU9dGsuTVVMVElQTEUsIGV4cG9ydHNlbGVjdGlvbj1GYWxzZSkNCiAgICAgICAgZm9yIHQgaW4gc2VsZi50YWJsZXM6DQogICAgICAgICAgICBsaXN0Ym94Lmluc2VydCh0ay5FTkQsIHQpDQogICAgICAgIGxpc3Rib3gucGFjayhleHBhbmQ9VHJ1ZSwgZmlsbD10ay5CT1RILCBwYWR4PTEwLCBwYWR5PTEwKQ0KDQogICAgICAgIGJ0biA9IHRrLkJ1dHRvbih3aW5kb3csIHRleHQ9IkxhdW5jaCBzcWxpdGUtd2ViIiwgY29tbWFuZD1vbl9zdWJtaXQpDQogICAgICAgIGJ0bi5wYWNrKHBhZHk9MTApDQoNCiAgICAgICAgd2luZG93Lm1haW5sb29wKCkNCiAgICAgICAgcmV0dXJuIHNlbGVjdGVkDQoNCiAgICBkZWYgbGF1bmNoX3NxbGl0ZV93ZWIoc2VsZiwgc2VsZWN0ZWRfdGFibGVzKToNCiAgICAgICAgIiIiTGF1bmNoIHNxbGl0ZS13ZWIgb24gdGhlIERCLiIiIg0KICAgICAgICBwcmludChmIkxhdW5jaGluZyBzcWxpdGUtd2ViIG9uOiB7c2VsZi5kYl9wYXRofSIpDQogICAgICAgIHByaW50KGYiU2VsZWN0ZWQgdGFibGVzOiB7c2VsZWN0ZWRfdGFibGVzfSIpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHJ1bnB5LnJ1bl9tb2R1bGUoInNxbGl0ZV93ZWIiLCBydW5fbmFtZT0iX19tYWluX18iLCBhbHRlcl9zeXM9VHJ1ZSkNCiAgICAgICAgICAgICNzdWJwcm9jZXNzLnJ1bihbInNxbGl0ZV93ZWIiLCBzZWxmLmRiX3BhdGhdKQ0KICAgICAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3I6DQogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCAic3FsaXRlLXdlYiBpcyBub3QgaW5zdGFsbGVkLlxuUnVuIGBwaXAgaW5zdGFsbCBzcWxpdGUtd2ViYC4iKQ0KICAgICAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6DQogICAgICAgICAgICBwcmludCgiQ2xvc2VkIGJ5IHVzZXIuIikNCg0KICAgIGRlZiBydW4oc2VsZik6DQogICAgICAgICIiIk1haW4gZmxvdy4iIiINCiAgICAgICAgc2VsZi5saXN0X3RhYmxlcygpDQogICAgICAgIHNlbGVjdGVkX3RhYmxlcyA9IHNlbGYucHJvbXB0X3RhYmxlX3NlbGVjdGlvbigpDQogICAgICAgIGlmIG5vdCBzZWxlY3RlZF90YWJsZXM6DQogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dpbmZvKCJDYW5jZWxsZWQiLCAiTm8gdGFibGVzIHNlbGVjdGVkLiIpDQogICAgICAgICAgICBzeXMuZXhpdCgwKQ0KICAgICAgICBzZWxmLmxhdW5jaF9zcWxpdGVfd2ViKHNlbGVjdGVkX3RhYmxlcykNCg0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIHZpZXdlciA9IFNRTGl0ZVdlYldyYXBwZXJHVUkoKQ0KICAgIHZpZXdlci5ydW4oKQ0KDQoNCg0K", "path": "output/patch_code_bundles/backend/core/utils/db/sqlite_viewer.py", "sha256_chunk": "5a60ba18900c3baf671a00cef6cb00e9f3f2165f8c4ee9bef34006c59207ab98", "sha256_file": "5a60ba18900c3baf671a00cef6cb00e9f3f2165f8c4ee9bef34006c59207ab98", "type": "file_chunk"}
{"byte_end": 0, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/downloaders/__init__.py", "sha256_chunk": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "sha256_file": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "type": "file_chunk"}
{"byte_end": 6573, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/downloaders/download_ai_models.py", "sha256_chunk": "e09f62e7952bd59884cc80114e3e3ef4bf46108246f26fefc76989f8c99b24e5", "sha256_file": "e09f62e7952bd59884cc80114e3e3ef4bf46108246f26fefc76989f8c99b24e5", "type": "file_chunk"}
{"byte_end": 29, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "IiIiRmlsZXN5c3RlbSBJTyBoZWxwZXJzLiIiIgo=", "path": "output/patch_code_bundles/backend/core/utils/io/__init__.py", "sha256_chunk": "b106b593b9f0919ce28703401a8686f8deceef86b4c5652cf7d73b9cb49803b5", "sha256_file": "b106b593b9f0919ce28703401a8686f8deceef86b4c5652cf7d73b9cb49803b5", "type": "file_chunk"}
{"byte_end": 1273, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgpAZGF0YWNsYXNzKHNsb3RzPVRydWUpCmNsYXNzIEZpbGVPcHNDb25maWc6CiAgICBub3JtYWxpemVfbmV3bGluZXM6IGJvb2wgPSBUcnVlCiAgICBwcmVzZXJ2ZV9jcmxmOiBib29sID0gRmFsc2UgICMgd2hlbiBUcnVlLCB3cml0ZSBDUkxGIGluc3RlYWQgb2YgTEYKCmNsYXNzIEZpbGVPcHM6CiAgICBkZWYgX19pbml0X18oc2VsZiwgY2ZnOiBGaWxlT3BzQ29uZmlnIHwgTm9uZSA9IE5vbmUpOgogICAgICAgIHNlbGYuY2ZnID0gY2ZnIG9yIEZpbGVPcHNDb25maWcoKQoKICAgIGRlZiByZWFkX3RleHQoc2VsZiwgcDogUGF0aCkgLT4gc3RyOgogICAgICAgIHR4dCA9IHAucmVhZF90ZXh0KGVuY29kaW5nPSJ1dGYtOCIsIGVycm9ycz0iaWdub3JlIikKICAgICAgICByZXR1cm4gc2VsZi5fbm9ybSh0eHQpCgogICAgZGVmIHdyaXRlX3RleHQoc2VsZiwgcDogUGF0aCwgdGV4dDogc3RyLCAqLCBwcmVzZXJ2ZV9jcmxmOiBib29sIHwgTm9uZSA9IE5vbmUpIC0+IE5vbmU6CiAgICAgICAgIiIiV3JpdGUgdGV4dCwgb3B0aW9uYWxseSBvdmVycmlkaW5nIENSTEYgcHJlc2VydmF0aW9uIHBlciBjYWxsLiIiIgogICAgICAgIHAucGFyZW50Lm1rZGlyKHBhcmVudHM9VHJ1ZSwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICBzID0gc2VsZi5fbm9ybSh0ZXh0KQogICAgICAgIGlmIHByZXNlcnZlX2NybGYgaXMgVHJ1ZToKICAgICAgICAgICAgcyA9IHMucmVwbGFjZSgiXG4iLCAiXHJcbiIpCiAgICAgICAgZWxpZiBwcmVzZXJ2ZV9jcmxmIGlzIEZhbHNlOgogICAgICAgICAgICAjIGZvcmNlIExGCiAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoIlxyXG4iLCAiXG4iKS5yZXBsYWNlKCJcciIsICJcbiIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyB1c2UgY29uZmlnIGRlZmF1bHQKICAgICAgICAgICAgaWYgc2VsZi5jZmcucHJlc2VydmVfY3JsZjoKICAgICAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoIlxuIiwgIlxyXG4iKQogICAgICAgIHAud3JpdGVfdGV4dChzLCBlbmNvZGluZz0idXRmLTgiKQoKICAgIGRlZiBfbm9ybShzZWxmLCBzOiBzdHIpIC0+IHN0cjoKICAgICAgICBpZiBub3Qgc2VsZi5jZmcubm9ybWFsaXplX25ld2xpbmVzOgogICAgICAgICAgICByZXR1cm4gcwogICAgICAgIHJldHVybiBzLnJlcGxhY2UoIlxyXG4iLCAiXG4iKS5yZXBsYWNlKCJcciIsICJcbiIpCg==", "path": "output/patch_code_bundles/backend/core/utils/io/file_ops.py", "sha256_chunk": "f9817b32b1b98daa4c93ea8bc2f84597f8dd4ae5debb16d0c83088990deab6b0", "sha256_file": "f9817b32b1b98daa4c93ea8bc2f84597f8dd4ae5debb16d0c83088990deab6b0", "type": "file_chunk"}
{"byte_end": 1430, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmltcG9ydCBqc29uLCBjc3YKZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEFueSwgTGlzdApmcm9tIC5maWxlX29wcyBpbXBvcnQgRmlsZU9wcywgRmlsZU9wc0NvbmZpZwoKQGRhdGFjbGFzcwpjbGFzcyBPdXRwdXRXcml0ZXI6CiAgICByb290OiBQYXRoCiAgICBkZWYgX19wb3N0X2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmZvID0gRmlsZU9wcyhGaWxlT3BzQ29uZmlnKCkpCiAgICAgICAgKHNlbGYucm9vdCAvICJpdGVtcyIpLm1rZGlyKHBhcmVudHM9VHJ1ZSwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICAoc2VsZi5yb290IC8gImJhdGNoZXMiKS5ta2RpcihleGlzdF9vaz1UcnVlKQogICAgICAgIHNlbGYuX3N1bW1hcnkgPSBzZWxmLnJvb3QgLyAic3VtbWFyeS5jc3YiCiAgICAgICAgaWYgbm90IHNlbGYuX3N1bW1hcnkuZXhpc3RzKCk6CiAgICAgICAgICAgIHdpdGggc2VsZi5fc3VtbWFyeS5vcGVuKCJ3IiwgbmV3bGluZT0iIiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZjoKICAgICAgICAgICAgICAgIGNzdi53cml0ZXIoZikud3JpdGVyb3coWyJpZCIsInBhdGgiLCJzaWduYXR1cmUiLCJvdXRmaWxlIiwib2siLCJlcnJvciJdKQoKICAgIGRlZiB3cml0ZV9pdGVtKHNlbGYsIGl0ZW06IERpY3Rbc3RyLCBBbnldKSAtPiBQYXRoOgogICAgICAgIHAgPSBzZWxmLnJvb3QgLyAiaXRlbXMiIC8gZiJ7aXRlbVsnaWQnXX0uanNvbiIKICAgICAgICBzZWxmLmZvLndyaXRlX3RleHQocCwganNvbi5kdW1wcyhpdGVtLCBlbnN1cmVfYXNjaWk9RmFsc2UsIGluZGVudD0yKSk7IHJldHVybiBwCgogICAgZGVmIGFwcGVuZF9iYXRjaChzZWxmLCBpdGVtczogTGlzdFtEaWN0W3N0ciwgQW55XV0pIC0+IFBhdGg6CiAgICAgICAgcCA9IHNlbGYucm9vdCAvICJiYXRjaGVzIiAvICJiYXRjaGVzLmpzb25sIgogICAgICAgIHdpdGggcC5vcGVuKCJhIiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZjoKICAgICAgICAgICAgZm9yIGl0IGluIGl0ZW1zOiBmLndyaXRlKGpzb24uZHVtcHMoaXQsIGVuc3VyZV9hc2NpaT1GYWxzZSkgKyAiXG4iKQogICAgICAgIHJldHVybiBwCgogICAgZGVmIGFwcGVuZF9zdW1tYXJ5KHNlbGYsIGlkOiBzdHIsIHBhdGg6IHN0ciwgc2lnbmF0dXJlOiBzdHIsIG91dGZpbGU6IHN0ciwgb2s6IGJvb2wsIGVycm9yOiBzdHIgPSAiIikgLT4gTm9uZToKICAgICAgICB3aXRoIHNlbGYuX3N1bW1hcnkub3BlbigiYSIsIG5ld2xpbmU9IiIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6CiAgICAgICAgICAgIGNzdi53cml0ZXIoZikud3JpdGVyb3coW2lkLCBwYXRoLCBzaWduYXR1cmUsIG91dGZpbGUsICIxIiBpZiBvayBlbHNlICIwIiwgZXJyb3JdKQo=", "path": "output/patch_code_bundles/backend/core/utils/io/output_writer.py", "sha256_chunk": "b050baa8604d544329a27e531b053b792df249202d2801cb7ddd9d3ae0057a27", "sha256_file": "b050baa8604d544329a27e531b053b792df249202d2801cb7ddd9d3ae0057a27", "type": "file_chunk"}
{"byte_end": 1127, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMw0KaW1wb3J0IG9zDQppbXBvcnQgemlwZmlsZQ0KDQojID09PT0gQ09ORklHID09PT0NClNPVVJDRV9GT0xERVIgPSByIkM6XFVzZXJzXGNnMzcxXENvZGUgUmVwb3NcTGluZWFnZSIgICAgICMgRm9sZGVyIHRvIHppcA0KT1VUUFVUX1pJUCA9IHIiQzpcVXNlcnNcY2czNzFcQ29kZSBSZXBvc1xMaW5lYWdlLnppcCIgICAgIyBPdXRwdXQgYXJjaGl2ZSBwYXRoDQojID09PT09PT09PT09PT09PT0NCg0KZGVmIHppcF9kaXJlY3RvcnkoZm9sZGVyX3BhdGgsIG91dHB1dF9maWxlbmFtZSk6DQogICAgZm9sZGVyX3BhdGggPSBvcy5wYXRoLmFic3BhdGgoZm9sZGVyX3BhdGgpDQogICAgdG9wX2Rpcl9uYW1lID0gb3MucGF0aC5iYXNlbmFtZShmb2xkZXJfcGF0aC5yc3RyaXAob3Muc2VwKSkNCg0KICAgIHdpdGggemlwZmlsZS5aaXBGaWxlKG91dHB1dF9maWxlbmFtZSwgJ3cnLCB6aXBmaWxlLlpJUF9ERUZMQVRFRCkgYXMgemlwZjoNCiAgICAgICAgZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsoZm9sZGVyX3BhdGgpOg0KICAgICAgICAgICAgZm9yIGZpbGUgaW4gZmlsZXM6DQogICAgICAgICAgICAgICAgYWJzX2ZpbGVfcGF0aCA9IG9zLnBhdGguam9pbihyb290LCBmaWxlKQ0KICAgICAgICAgICAgICAgICMgRW5zdXJlIHRvcF9kaXJfbmFtZSBpcyB0aGUgcm9vdCBmb2xkZXIgaW4gdGhlIGFyY2hpdmUNCiAgICAgICAgICAgICAgICByZWxfcGF0aF9pbl96aXAgPSBvcy5wYXRoLmpvaW4odG9wX2Rpcl9uYW1lLCBvcy5wYXRoLnJlbHBhdGgoYWJzX2ZpbGVfcGF0aCwgZm9sZGVyX3BhdGgpKQ0KICAgICAgICAgICAgICAgIHppcGYud3JpdGUoYWJzX2ZpbGVfcGF0aCwgcmVsX3BhdGhfaW5femlwKQ0KDQogICAgcHJpbnQoZiJDcmVhdGVkIGFyY2hpdmU6IHtvdXRwdXRfZmlsZW5hbWV9IikNCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBpZiBub3Qgb3MucGF0aC5pc2RpcihTT1VSQ0VfRk9MREVSKToNCiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmIlNvdXJjZSBmb2xkZXIgZG9lcyBub3QgZXhpc3Q6IHtTT1VSQ0VfRk9MREVSfSIpDQoNCiAgICB6aXBfZGlyZWN0b3J5KFNPVVJDRV9GT0xERVIsIE9VVFBVVF9aSVApDQo=", "path": "output/patch_code_bundles/backend/core/utils/io/recursively_zip_directory.py", "sha256_chunk": "c302a36479174c3d80790e34e5792f2bcc88762ccf13c42793f6b9a7bfc168fb", "sha256_file": "c302a36479174c3d80790e34e5792f2bcc88762ccf13c42793f6b9a7bfc168fb", "type": "file_chunk"}
{"byte_end": 879, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwpmcm9tIGRhdGFjbGFzc2VzIGltcG9ydCBkYXRhY2xhc3MKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBPcHRpb25hbAoKQGRhdGFjbGFzcwpjbGFzcyBSdW5EaXJzOgogICAgb3V0X2Jhc2U6IFBhdGgKCiAgICBkZWYgbWFrZV9ydW5faWQoc2VsZiwgc3VmZml4OiBPcHRpb25hbFtzdHJdID0gTm9uZSkgLT4gc3RyOgogICAgICAgIHRzID0gZGF0ZXRpbWUubm93KCkuc3RyZnRpbWUoIiVZJW0lZF8lSCVNJVMiKQogICAgICAgIHJldHVybiBmInt0c31fe3N1ZmZpeH0iIGlmIHN1ZmZpeCBlbHNlIHRzCgogICAgZGVmIGVuc3VyZShzZWxmLCBydW5faWQ6IHN0cik6CiAgICAgICAgcm9vdCA9IHNlbGYub3V0X2Jhc2UgLyBydW5faWQKICAgICAgICBzdWIgPSBbCiAgICAgICAgICAgICJhcmNoaXZlcyIsICJwYXRjaGVzIiwgInByb2RfYXBwbGllZCIsICJyYXdfcHJvbXB0cyIsCiAgICAgICAgICAgICJyYXdfcmVzcG9uc2VzIiwgInJvbGxiYWNrcyIsICJzYW5kYm94X2FwcGxpZWQiLCAidmVyaWZ5X3JlcG9ydHMiCiAgICAgICAgXQogICAgICAgIHJvb3QubWtkaXIocGFyZW50cz1UcnVlLCBleGlzdF9vaz1UcnVlKQogICAgICAgIGZvciBuYW1lIGluIHN1YjogKHJvb3QgLyBuYW1lKS5ta2RpcihleGlzdF9vaz1UcnVlKQogICAgICAgICMgbGVnYWN5IGFsaWFzCiAgICAgICAgKHJvb3QgLyAidmVyaWZ5IHJlcG9ydHMiKS5ta2RpcihleGlzdF9vaz1UcnVlKQogICAgICAgIHJldHVybiB0eXBlKCJSdW5EaXIiLCAoKSwgeyJyb290Ijogcm9vdCwgKip7bjogcm9vdCAvIG4gZm9yIG4gaW4gc3VifX0pKCkK", "path": "output/patch_code_bundles/backend/core/utils/io/run_dir.py", "sha256_chunk": "a854881e065d733aba4c151fc8d04a7185c1e16e32d720ec86c6a687f8ef9a60", "sha256_file": "a854881e065d733aba4c151fc8d04a7185c1e16e32d720ec86c6a687f8ef9a60", "type": "file_chunk"}
{"byte_end": 0, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/logging/__init__.py", "sha256_chunk": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "sha256_file": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "type": "file_chunk"}
{"byte_end": 612, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZGVmIF9vbmVfbGluZShzOiBzdHIsIG1heF9sZW46IGludCA9IDE2MCkgLT4gc3RyOgogICAgcyA9ICIgIi5qb2luKChzIG9yICIiKS5zcGxpdCgpKQogICAgcmV0dXJuIHNbOm1heF9sZW5dICsgKCLigKYiIGlmIGxlbihzKSA+IG1heF9sZW4gZWxzZSAiIikKCmNsYXNzIENvbnNvbGVMb2c6CiAgICBkZWYgX19pbml0X18oc2VsZiwgdGFnOiBzdHIpOgogICAgICAgIHNlbGYudGFnID0gdGFnCgogICAgZGVmIGluZm8oc2VsZiwgbXNnOiBzdHIpOgogICAgICAgIHByaW50KGYiW3tzZWxmLnRhZ30g4pyFXSB7X29uZV9saW5lKG1zZyl9IikKCiAgICBkZWYgd2FybihzZWxmLCBtc2c6IHN0cik6CiAgICAgICAgcHJpbnQoZiJbe3NlbGYudGFnfSDimqDvuI9dIHtfb25lX2xpbmUobXNnKX0iKQoKICAgIGRlZiBlcnJvcihzZWxmLCBtc2c6IHN0cik6CiAgICAgICAgcHJpbnQoZiJbe3NlbGYudGFnfSDinYxdIHtfb25lX2xpbmUobXNnKX0iKQoKICAgIGRlZiBzdGFnZShzZWxmLCBlbW9qaTogc3RyLCBtc2c6IHN0cik6CiAgICAgICAgcHJpbnQoZiJbe3NlbGYudGFnfSB7ZW1vaml9XSB7X29uZV9saW5lKG1zZyl9IikK", "path": "output/patch_code_bundles/backend/core/utils/logging/logging.py", "sha256_chunk": "c52fe86dc165b2b418dea520166d7b6fa4603142eac9e1f4931c243ca276b5d4", "sha256_file": "c52fe86dc165b2b418dea520166d7b6fa4603142eac9e1f4931c243ca276b5d4", "type": "file_chunk"}
{"byte_end": 0, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/scanners/__init__.py", "sha256_chunk": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "sha256_file": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "type": "file_chunk"}
{"byte_end": 23064, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/backend/core/utils/scanners/code_indexer.py", "sha256_chunk": "05cac01c8b5a4c9a6746c5b2ec4d64f47b274d92f163f56b81e492b28d993dbb", "sha256_file": "05cac01c8b5a4c9a6746c5b2ec4d64f47b274d92f163f56b81e492b28d993dbb", "type": "file_chunk"}
{"byte_end": 1645, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "aW1wb3J0IG9zDQpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBkZWZhdWx0ZGljdA0KDQojIERlZmluZSB5b3VyIHJvb3QgZGlyZWN0b3J5DQpST09UX0RJUiA9IHIiLyINCg0KIyBEZWZpbmUgc2NyaXB0LWxpa2UgZmlsZSBleHRlbnNpb25zDQpTQ1JJUFRfRVhURU5TSU9OUyA9IHsnLnB5JywgJy5zaCcsICcuYmF0JywgJy5wczEnLCAnLmpzJywgJy50cycsICcucmInLCAnLnBsJywgJy5sdWEnLCAnLnBocCcsICcucicsICcuamF2YScsICcuY3BwJywgJy5jJywgJy5jcyd9DQoNCiMgSW5pdGlhbGl6ZSBjb3VudGVycw0Kb3ZlcmFsbF9pbmNsX2JsYW5rID0gMA0Kb3ZlcmFsbF9leGNsX2JsYW5rID0gMA0KYnlfZXh0ID0gZGVmYXVsdGRpY3QobGFtYmRhOiB7J2luY2wnOiAwLCAnZXhjbCc6IDB9KQ0KDQpkZWYgaXNfc2NyaXB0X2ZpbGUoZmlsZW5hbWUpOg0KICAgIHJldHVybiBvcy5wYXRoLnNwbGl0ZXh0KGZpbGVuYW1lKVsxXS5sb3dlcigpIGluIFNDUklQVF9FWFRFTlNJT05TDQoNCiMgV2FsayB0aHJvdWdoIHRoZSBkaXJlY3RvcnkNCmZvciByb290LCBfLCBmaWxlcyBpbiBvcy53YWxrKFJPT1RfRElSKToNCiAgICBmb3IgZmlsZSBpbiBmaWxlczoNCiAgICAgICAgaWYgaXNfc2NyaXB0X2ZpbGUoZmlsZSk6DQogICAgICAgICAgICBleHQgPSBvcy5wYXRoLnNwbGl0ZXh0KGZpbGUpWzFdLmxvd2VyKCkNCiAgICAgICAgICAgIGZpbGVfcGF0aCA9IG9zLnBhdGguam9pbihyb290LCBmaWxlKQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHdpdGggb3BlbihmaWxlX3BhdGgsICdyJywgZW5jb2Rpbmc9J3V0Zi04JywgZXJyb3JzPSdpZ25vcmUnKSBhcyBmOg0KICAgICAgICAgICAgICAgICAgICBsaW5lcyA9IGYucmVhZGxpbmVzKCkNCiAgICAgICAgICAgICAgICAgICAgaW5jbCA9IGxlbihsaW5lcykNCiAgICAgICAgICAgICAgICAgICAgZXhjbCA9IHN1bSgxIGZvciBsaW5lIGluIGxpbmVzIGlmIGxpbmUuc3RyaXAoKSkNCiAgICAgICAgICAgICAgICAgICAgb3ZlcmFsbF9pbmNsX2JsYW5rICs9IGluY2wNCiAgICAgICAgICAgICAgICAgICAgb3ZlcmFsbF9leGNsX2JsYW5rICs9IGV4Y2wNCiAgICAgICAgICAgICAgICAgICAgYnlfZXh0W2V4dF1bJ2luY2wnXSArPSBpbmNsDQogICAgICAgICAgICAgICAgICAgIGJ5X2V4dFtleHRdWydleGNsJ10gKz0gZXhjbA0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgIHByaW50KGYi4pqg77iPIEVycm9yIHJlYWRpbmcge2ZpbGVfcGF0aH06IHtlfSIpDQoNCiMgUHJpbnQgdG90YWxzDQpwcmludChmIlxu8J+TiiBPVkVSQUxMIFRPVEFMUyIpDQpwcmludChmIlRvdGFsIGxpbmVzIChpbmNsdWRpbmcgd2hpdGVzcGFjZSk6IHtvdmVyYWxsX2luY2xfYmxhbmt9IikNCnByaW50KGYiVG90YWwgbGluZXMgKGV4Y2x1ZGluZyB3aGl0ZXNwYWNlKToge292ZXJhbGxfZXhjbF9ibGFua30iKQ0KDQpwcmludChmIlxu8J+TiiBCUkVBS0RPV04gQlkgRklMRSBFWFRFTlNJT04iKQ0KZm9yIGV4dCwgY291bnRzIGluIHNvcnRlZChieV9leHQuaXRlbXMoKSk6DQogICAgcHJpbnQoZiJ7ZXh0fToge2NvdW50c1snaW5jbCddfSBsaW5lcyAoaW5jbCksIHtjb3VudHNbJ2V4Y2wnXX0gbGluZXMgKGV4Y2wpIikNCg==", "path": "output/patch_code_bundles/backend/core/utils/scanners/code_length.py", "sha256_chunk": "78b61038a0a9d5fa2eabab633465f598f4ed232ca7725aaed775a3c1b708a5af", "sha256_file": "78b61038a0a9d5fa2eabab633465f598f4ed232ca7725aaed775a3c1b708a5af", "type": "file_chunk"}
{"byte_end": 1181, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "aW1wb3J0IG9zDQoNCiMg8J+UpyBTZXQgeW91ciB0YXJnZXQgZGlyZWN0b3J5IGhlcmUNClRBUkdFVF9ESVIgPSAiL3YxL2JhY2tlbmRcXGNvcmVcXCINCiNUQVJHRVRfRElSID0gIkc6XFxNeSBEcml2ZVxcQ29tZnlVSVxccGFja2FnZXNcXGNvbWZ5dWktcGFja2FnZXNcXCINCg0KZGVmIGNyYXdsX2RpcmVjdG9yeShwYXRoKToNCiAgICBzdHJ1Y3R1cmUgPSB7fQ0KICAgIGZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKHBhdGgpOg0KICAgICAgICAjcHJpbnQoZGlycywgZmlsZXMpDQogICAgICAgICMgQnVpbGQgbmVzdGVkIGRpY3Rpb25hcnkga2V5cw0KICAgICAgICByZWxfcGF0aCA9IG9zLnBhdGgucmVscGF0aChyb290LCBwYXRoKQ0KICAgICAgICBwYXJ0cyA9IHJlbF9wYXRoLnNwbGl0KG9zLnNlcCkgaWYgcmVsX3BhdGggIT0gJy4nIGVsc2UgW10NCiAgICAgICAgY3VycmVudCA9IHN0cnVjdHVyZQ0KICAgICAgICBpZiAndGVtcGxhdGVzJyBub3QgaW4gcGFydHM6DQogICAgICAgICAgICBmb3IgcGFydCBpbiBwYXJ0czoNCiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5zZXRkZWZhdWx0KHBhcnQsIHt9KQ0KICAgICAgICBjdXJyZW50WyJfX2ZpbGVzX18iXSA9IGZpbGVzDQogICAgcmV0dXJuIHN0cnVjdHVyZQ0KDQpkZWYgcHJpbnRfeWFtbF9saWtlKHN0cnVjdHVyZSwgaW5kZW50PTApOg0KICAgIGZvciBrZXksIHZhbHVlIGluIHN0cnVjdHVyZS5pdGVtcygpOg0KICAgICAgICBpZiBrZXkgPT0gIl9fZmlsZXNfXyI6DQogICAgICAgICAgICBmb3IgZiBpbiB2YWx1ZToNCiAgICAgICAgICAgICAgICBwcmludCgiICAiICogaW5kZW50ICsgZiItIHtmfSIpDQogICAgICAgICAgICAgICAgI3Bhc3MNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50KCIgICIgKiBpbmRlbnQgKyBmIntrZXl9LyIpDQogICAgICAgICAgICBwcmludF95YW1sX2xpa2UodmFsdWUsIGluZGVudCArIDEpDQogICAgICAgICAgICAjcGFzcw0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIHByaW50KGYiXG7wn5OBIERpcmVjdG9yeSBzdHJ1Y3R1cmUgdW5kZXI6IHtvcy5wYXRoLmFic3BhdGgoVEFSR0VUX0RJUil9XG4iKQ0KICAgIHJlc3VsdCA9IGNyYXdsX2RpcmVjdG9yeShUQVJHRVRfRElSKQ0KICAgIHByaW50X3lhbWxfbGlrZShyZXN1bHQpDQo=", "path": "output/patch_code_bundles/backend/core/utils/scanners/dir_crawler.py", "sha256_chunk": "4c2a93c5599724a82b76c5577964a24f0cb3ff250d4935cb56f1387d982e3289", "sha256_file": "4c2a93c5599724a82b76c5577964a24f0cb3ff250d4935cb56f1387d982e3289", "type": "file_chunk"}
{"byte_end": 0, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/cli/__init__.py", "sha256_chunk": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "sha256_file": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "type": "file_chunk"}
{"byte_end": 0, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/models/__init__.py", "sha256_chunk": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "sha256_file": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "type": "file_chunk"}
{"byte_end": 4013, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucw0KZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBBbnksIERpY3QsIExpdGVyYWwNCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lDQppbXBvcnQganNvbg0KDQpmcm9tIHNxbGFsY2hlbXkub3JtIGltcG9ydCBEZWNsYXJhdGl2ZUJhc2UsIE1hcHBlZCwgbWFwcGVkX2NvbHVtbg0KZnJvbSBzcWxhbGNoZW15IGltcG9ydCBTdHJpbmcsIFRleHQsIEludGVnZXIsIEZsb2F0LCBCb29sZWFuLCBUSU1FU1RBTVAsIGZ1bmMsIEluZGV4LCBVbmlxdWVDb25zdHJhaW50DQoNCmNsYXNzIEJhc2UoRGVjbGFyYXRpdmVCYXNlKToNCiAgICBwYXNzDQoNClN0YXR1c1R5cGUgPSBMaXRlcmFsWyJhY3RpdmUiLCAiZGVwcmVjYXRlZCIsICJyZW1vdmVkIl0NCg0KY2xhc3MgQWdlbnRJbnNpZ2h0KEJhc2UpOg0KICAgIF9fdGFibGVuYW1lX18gPSAiYWdlbnRfaW5zaWdodHMiDQoNCiAgICBpZDogTWFwcGVkW2ludF0gPSBtYXBwZWRfY29sdW1uKEludGVnZXIsIHByaW1hcnlfa2V5PVRydWUpDQogICAgYWdlbnRfaWQ6IE1hcHBlZFtpbnRdID0gbWFwcGVkX2NvbHVtbihJbnRlZ2VyLCBudWxsYWJsZT1GYWxzZSkNCiAgICBpbnNpZ2h0X3R5cGU6IE1hcHBlZFtzdHJdID0gbWFwcGVkX2NvbHVtbihTdHJpbmcsIG51bGxhYmxlPUZhbHNlKQ0KICAgIGNvbnRlbnQ6IE1hcHBlZFtzdHJdID0gbWFwcGVkX2NvbHVtbihUZXh0LCBudWxsYWJsZT1GYWxzZSkNCiAgICBzb3VyY2U6IE1hcHBlZFtzdHJdID0gbWFwcGVkX2NvbHVtbihTdHJpbmcsIGRlZmF1bHQ9ImludGVybmFsIikNCg0KICAgIHNjb3JlOiBNYXBwZWRbT3B0aW9uYWxbZmxvYXRdXSA9IG1hcHBlZF9jb2x1bW4oRmxvYXQpDQogICAgbWRhdGE6IE1hcHBlZFtzdHJdID0gbWFwcGVkX2NvbHVtbihUZXh0LCBkZWZhdWx0PSJ7fSIpICAjIEpTT04gYXMgdGV4dA0KDQogICAgZmlsZXBhdGg6IE1hcHBlZFtPcHRpb25hbFtzdHJdXSA9IG1hcHBlZF9jb2x1bW4oVGV4dCkNCiAgICBzeW1ib2xfbmFtZTogTWFwcGVkW09wdGlvbmFsW3N0cl1dID0gbWFwcGVkX2NvbHVtbihUZXh0KQ0KICAgIGxpbmVfbnVtYmVyOiBNYXBwZWRbaW50XSA9IG1hcHBlZF9jb2x1bW4oSW50ZWdlciwgZGVmYXVsdD0wKQ0KDQogICAgdW5pcXVlX2tleV9oYXNoOiBNYXBwZWRbT3B0aW9uYWxbc3RyXV0gPSBtYXBwZWRfY29sdW1uKFRleHQpDQogICAgc3RhdHVzOiBNYXBwZWRbc3RyXSA9IG1hcHBlZF9jb2x1bW4oU3RyaW5nKDE2KSwgZGVmYXVsdD0iYWN0aXZlIiwgbnVsbGFibGU9RmFsc2UpDQoNCiAgICBkaXNjb3ZlcmVkX2F0OiBNYXBwZWRbZGF0ZXRpbWVdID0gbWFwcGVkX2NvbHVtbihUSU1FU1RBTVAsIHNlcnZlcl9kZWZhdWx0PWZ1bmMubm93KCkpDQogICAgbGFzdF9zZWVuX2F0OiBNYXBwZWRbZGF0ZXRpbWVdID0gbWFwcGVkX2NvbHVtbihUSU1FU1RBTVAsIHNlcnZlcl9kZWZhdWx0PWZ1bmMubm93KCkpDQogICAgcmVzb2x2ZWRfYXQ6IE1hcHBlZFtPcHRpb25hbFtkYXRldGltZV1dID0gbWFwcGVkX2NvbHVtbihUSU1FU1RBTVApDQoNCiAgICBvY2N1cnJlbmNlczogTWFwcGVkW2ludF0gPSBtYXBwZWRfY29sdW1uKEludGVnZXIsIGRlZmF1bHQ9MSkNCiAgICByZWN1cnJlbmNlX2NvdW50OiBNYXBwZWRbaW50XSA9IG1hcHBlZF9jb2x1bW4oSW50ZWdlciwgZGVmYXVsdD0wKQ0KDQogICAgY3JlYXRlZF9hdDogTWFwcGVkW2RhdGV0aW1lXSA9IG1hcHBlZF9jb2x1bW4oVElNRVNUQU1QLCBzZXJ2ZXJfZGVmYXVsdD1mdW5jLm5vdygpLCBudWxsYWJsZT1GYWxzZSkNCiAgICB1cGRhdGVkX2F0OiBNYXBwZWRbZGF0ZXRpbWVdID0gbWFwcGVkX2NvbHVtbihUSU1FU1RBTVAsIHNlcnZlcl9kZWZhdWx0PWZ1bmMubm93KCksIG9udXBkYXRlPWZ1bmMubm93KCksIG51bGxhYmxlPUZhbHNlKQ0KDQogICAgcmV2aWV3ZWQ6IE1hcHBlZFtib29sXSA9IG1hcHBlZF9jb2x1bW4oQm9vbGVhbiwgZGVmYXVsdD1GYWxzZSwgbnVsbGFibGU9RmFsc2UpDQogICAgcmV2aWV3ZXI6IE1hcHBlZFtPcHRpb25hbFtzdHJdXSA9IG1hcHBlZF9jb2x1bW4oU3RyaW5nKQ0KICAgIHJldmlld19jb21tZW50OiBNYXBwZWRbT3B0aW9uYWxbc3RyXV0gPSBtYXBwZWRfY29sdW1uKFRleHQpDQoNCiAgICBfX3RhYmxlX2FyZ3NfXyA9ICgNCiAgICAgICAgSW5kZXgoImlkeF9hZ2VudF9pbnNpZ2h0c19hZ2VudF9pZCIsICJhZ2VudF9pZCIpLA0KICAgICAgICBJbmRleCgiaWR4X2FnZW50X2luc2lnaHRzX3R5cGUiLCAiaW5zaWdodF90eXBlIiksDQogICAgICAgIEluZGV4KCJpZHhfYWdlbnRfaW5zaWdodHNfcmV2aWV3ZWQiLCAicmV2aWV3ZWQiKSwNCiAgICAgICAgSW5kZXgoImlkeF9hZ2VudF9pbnNpZ2h0c19rZXlfaGFzaCIsICJ1bmlxdWVfa2V5X2hhc2giKSwNCiAgICAgICAgVW5pcXVlQ29uc3RyYWludCgiYWdlbnRfaWQiLCAidW5pcXVlX2tleV9oYXNoIiwgbmFtZT0idXFfYWdlbnRfaW5zaWdodHNfYWdlbnRfa2V5IiksDQogICAgKQ0KDQogICAgQHByb3BlcnR5DQogICAgZGVmIG1kYXRhX29iaihzZWxmKSAtPiBEaWN0W3N0ciwgQW55XToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcmV0dXJuIGpzb24ubG9hZHMoc2VsZi5tZGF0YSBvciAie30iKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uOg0KICAgICAgICAgICAgcmV0dXJuIHt9DQoNCiAgICBAbWRhdGFfb2JqLnNldHRlcg0KICAgIGRlZiBtZGF0YV9vYmooc2VsZiwgdmFsdWU6IERpY3Rbc3RyLCBBbnldKSAtPiBOb25lOg0KICAgICAgICBzZWxmLm1kYXRhID0ganNvbi5kdW1wcyh2YWx1ZSBvciB7fSkNCg0KDQojIC0tLS0tLS0tLS0gUHlkYW50aWMgRFRPcyAtLS0tLS0tLS0tDQpmcm9tIHB5ZGFudGljIGltcG9ydCBCYXNlTW9kZWwsIEZpZWxkLCB2YWxpZGF0b3INCg0KY2xhc3MgQWdlbnRJbnNpZ2h0SW4oQmFzZU1vZGVsKToNCiAgICBhZ2VudF9pZDogaW50DQogICAgaW5zaWdodF90eXBlOiBzdHINCiAgICBjb250ZW50OiBzdHINCiAgICBzb3VyY2U6IHN0ciA9ICJpbnRlcm5hbCINCiAgICBzY29yZTogT3B0aW9uYWxbZmxvYXRdID0gRmllbGQoTm9uZSwgZ2U9MC4wLCBsZT0xLjApDQogICAgbWRhdGE6IERpY3Rbc3RyLCBBbnldID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PWRpY3QpDQoNCiAgICBmaWxlcGF0aDogT3B0aW9uYWxbc3RyXSA9IE5vbmUNCiAgICBzeW1ib2xfbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmUNCiAgICBsaW5lX251bWJlcjogaW50ID0gMA0KDQogICAgdW5pcXVlX2tleV9oYXNoOiBPcHRpb25hbFtzdHJdID0gTm9uZQ0KICAgIHN0YXR1czogU3RhdHVzVHlwZSA9ICJhY3RpdmUiDQoNCiAgICBkaXNjb3ZlcmVkX2F0OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lDQogICAgbGFzdF9zZWVuX2F0OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lDQogICAgcmVzb2x2ZWRfYXQ6IE9wdGlvbmFsW2RhdGV0aW1lXSA9IE5vbmUNCg0KICAgIG9jY3VycmVuY2VzOiBpbnQgPSAxDQogICAgcmVjdXJyZW5jZV9jb3VudDogaW50ID0gMA0KDQogICAgcmV2aWV3ZWQ6IGJvb2wgPSBGYWxzZQ0KICAgIHJldmlld2VyOiBPcHRpb25hbFtzdHJdID0gTm9uZQ0KICAgIHJldmlld19jb21tZW50OiBPcHRpb25hbFtzdHJdID0gTm9uZQ0KDQogICAgQHZhbGlkYXRvcigibWRhdGEiLCBwcmU9VHJ1ZSkNCiAgICBkZWYgX2NvZXJjZV9tZGF0YShjbHMsIHYpOg0KICAgICAgICBpZiBpc2luc3RhbmNlKHYsIHN0cik6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcmV0dXJuIGpzb24ubG9hZHModikNCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246DQogICAgICAgICAgICAgICAgcmV0dXJuIHt9DQogICAgICAgIHJldHVybiB2IG9yIHt9DQoNCmNsYXNzIEFnZW50SW5zaWdodE91dChBZ2VudEluc2lnaHRJbik6DQogICAgaWQ6IGludA0KICAgIGNyZWF0ZWRfYXQ6IGRhdGV0aW1lDQogICAgdXBkYXRlZF9hdDogZGF0ZXRpbWUNCg0KICAgIGNsYXNzIENvbmZpZzoNCiAgICAgICAgb3JtX21vZGUgPSBUcnVlDQo=", "path": "output/patch_code_bundles/models/agent_insights.py", "sha256_chunk": "f42e74c667f6cd6e0ec3d868d65e5450458518b42a4dd4d3fc1f87d44b6f9a2c", "sha256_file": "f42e74c667f6cd6e0ec3d868d65e5450458518b42a4dd4d3fc1f87d44b6f9a2c", "type": "file_chunk"}
{"byte_end": 1649, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucw0KZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBMaXRlcmFsDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQ0KDQpmcm9tIHNxbGFsY2hlbXkub3JtIGltcG9ydCBEZWNsYXJhdGl2ZUJhc2UsIE1hcHBlZCwgbWFwcGVkX2NvbHVtbg0KZnJvbSBzcWxhbGNoZW15IGltcG9ydCBJbnRlZ2VyLCBUZXh0LCBTdHJpbmcsIEJMT0IsIFRJTUVTVEFNUCwgZnVuYywgSW5kZXgsIFVuaXF1ZUNvbnN0cmFpbnQsIEZvcmVpZ25LZXkNCg0KIyBVc2UgdGhlIHNhbWUgRGVjbGFyYXRpdmVCYXNlIHBhdHRlcm4gYXMgb3RoZXIgbW9kZWxzOyBpZiB5b3UgYWxyZWFkeQ0KIyBoYXZlIGEgc2hhcmVkIEJhc2UsIGltcG9ydCBhbmQgcmV1c2UgaXQgaW5zdGVhZCBvZiByZWRlZmluaW5nLg0KY2xhc3MgQmFzZShEZWNsYXJhdGl2ZUJhc2UpOg0KICAgIHBhc3MNCg0KRW1iZWRkaW5nRm9ybWF0ID0gTGl0ZXJhbFsiYXJyYXkiLCAiYmxvYiJdICAjIGhvdyB5b3Ugc2VyaWFsaXplIGNsaWVudC1zaWRlIChpbmZvcm1hdGlvbmFsKQ0KDQpjbGFzcyBJbnRyb3NwZWN0aW9uRW1iZWRkaW5nKEJhc2UpOg0KICAgICIiIg0KICAgIFN0b3JlcyBkZW5zZSB2ZWN0b3IgZW1iZWRkaW5ncyBmb3Igcm93cyBpbiBpbnRyb3NwZWN0aW9uX2luZGV4Lg0KICAgIE9uZSByb3cgcGVyIChpdGVtX2lkLCBtb2RlbCkuIEVtYmVkZGluZyBzdG9yZWQgYXMgQkxPQiAoZS5nLiwgZmxvYXQzMiBhcnJheSkuDQogICAgIiIiDQogICAgX190YWJsZW5hbWVfXyA9ICJpbnRyb3NwZWN0aW9uX2luZGV4X2VtYmVkZGluZ3MiDQoNCiAgICBpZDogTWFwcGVkW2ludF0gPSBtYXBwZWRfY29sdW1uKEludGVnZXIsIHByaW1hcnlfa2V5PVRydWUpDQogICAgaXRlbV9pZDogTWFwcGVkW2ludF0gPSBtYXBwZWRfY29sdW1uKA0KICAgICAgICBJbnRlZ2VyLA0KICAgICAgICBGb3JlaWduS2V5KCJpbnRyb3NwZWN0aW9uX2luZGV4LmlkIiwgb25kZWxldGU9IkNBU0NBREUiKSwNCiAgICAgICAgbnVsbGFibGU9RmFsc2UsDQogICAgKQ0KICAgIG1vZGVsOiBNYXBwZWRbc3RyXSA9IG1hcHBlZF9jb2x1bW4oU3RyaW5nKDEyOCksIG51bGxhYmxlPUZhbHNlKQ0KICAgIGRpbTogTWFwcGVkW2ludF0gPSBtYXBwZWRfY29sdW1uKEludGVnZXIsIG51bGxhYmxlPUZhbHNlKQ0KICAgIGVtYmVkZGluZzogTWFwcGVkW2J5dGVzXSA9IG1hcHBlZF9jb2x1bW4oQkxPQiwgbnVsbGFibGU9RmFsc2UpICAjIHBhY2tlZCBmbG9hdDMyDQogICAgY3JlYXRlZF9hdDogTWFwcGVkW2RhdGV0aW1lXSA9IG1hcHBlZF9jb2x1bW4oVElNRVNUQU1QLCBzZXJ2ZXJfZGVmYXVsdD1mdW5jLm5vdygpLCBudWxsYWJsZT1GYWxzZSkNCg0KICAgICMgb3B0aW9uYWwgbWV0YWRhdGENCiAgICBub3RlOiBNYXBwZWRbT3B0aW9uYWxbc3RyXV0gPSBtYXBwZWRfY29sdW1uKFRleHQpDQoNCiAgICBfX3RhYmxlX2FyZ3NfXyA9ICgNCiAgICAgICAgVW5pcXVlQ29uc3RyYWludCgiaXRlbV9pZCIsICJtb2RlbCIsIG5hbWU9InVxX2l4X2VtYmVkX2l0ZW1fbW9kZWwiKSwNCiAgICAgICAgSW5kZXgoImlkeF9peF9lbWJlZF9tb2RlbCIsICJtb2RlbCIpLA0KICAgICAgICBJbmRleCgiaWR4X2l4X2VtYmVkX2RpbSIsICJkaW0iKSwNCiAgICApDQo=", "path": "output/patch_code_bundles/models/introspection_embeddings.py", "sha256_chunk": "7f0719c4f9395a4e1dbd7a56fdcf43541f1eee7dc3241eabe33d7272e688a761", "sha256_file": "7f0719c4f9395a4e1dbd7a56fdcf43541f1eee7dc3241eabe33d7272e688a761", "type": "file_chunk"}
{"byte_end": 4093, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucw0KZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsLCBBbnksIERpY3QsIExpdGVyYWwNCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lDQppbXBvcnQganNvbg0KDQpmcm9tIHNxbGFsY2hlbXkub3JtIGltcG9ydCBEZWNsYXJhdGl2ZUJhc2UsIE1hcHBlZCwgbWFwcGVkX2NvbHVtbg0KZnJvbSBzcWxhbGNoZW15IGltcG9ydCBTdHJpbmcsIFRleHQsIEludGVnZXIsIFRJTUVTVEFNUCwgZnVuYywgSW5kZXgsIFVuaXF1ZUNvbnN0cmFpbnQNCg0KY2xhc3MgQmFzZShEZWNsYXJhdGl2ZUJhc2UpOg0KICAgIHBhc3MNCg0KU3ltYm9sVHlwZSA9IExpdGVyYWxbIm1vZHVsZSIsICJjbGFzcyIsICJmdW5jdGlvbiIsICJyb3V0ZSIsICJ1bmtub3duIl0NClN0YXR1c1R5cGUgPSBMaXRlcmFsWyJhY3RpdmUiLCAiZGVwcmVjYXRlZCIsICJyZW1vdmVkIl0NCg0KY2xhc3MgSW50cm9zcGVjdGlvbkluZGV4KEJhc2UpOg0KICAgIF9fdGFibGVuYW1lX18gPSAiaW50cm9zcGVjdGlvbl9pbmRleCINCg0KICAgIGlkOiBNYXBwZWRbaW50XSA9IG1hcHBlZF9jb2x1bW4oSW50ZWdlciwgcHJpbWFyeV9rZXk9VHJ1ZSkNCiAgICBmaWxlcGF0aDogTWFwcGVkW3N0cl0gPSBtYXBwZWRfY29sdW1uKFRleHQsIG51bGxhYmxlPUZhbHNlKQ0KICAgIHN5bWJvbF90eXBlOiBNYXBwZWRbc3RyXSA9IG1hcHBlZF9jb2x1bW4oU3RyaW5nKDMyKSwgZGVmYXVsdD0idW5rbm93biIsIG51bGxhYmxlPUZhbHNlKQ0KICAgIG5hbWU6IE1hcHBlZFtPcHRpb25hbFtzdHJdXSA9IG1hcHBlZF9jb2x1bW4oVGV4dCkNCiAgICBsaW5lbm86IE1hcHBlZFtpbnRdID0gbWFwcGVkX2NvbHVtbihJbnRlZ2VyLCBkZWZhdWx0PTApDQoNCiAgICByb3V0ZV9tZXRob2Q6IE1hcHBlZFtPcHRpb25hbFtzdHJdXSA9IG1hcHBlZF9jb2x1bW4oU3RyaW5nKDE2KSkNCiAgICByb3V0ZV9wYXRoOiBNYXBwZWRbT3B0aW9uYWxbc3RyXV0gPSBtYXBwZWRfY29sdW1uKFRleHQpDQogICAgYWdfdGFnOiBNYXBwZWRbT3B0aW9uYWxbc3RyXV0gPSBtYXBwZWRfY29sdW1uKFN0cmluZyg2NCkpDQogICAgZGVzY3JpcHRpb246IE1hcHBlZFtPcHRpb25hbFtzdHJdXSA9IG1hcHBlZF9jb2x1bW4oVGV4dCkNCg0KICAgIHRhcmdldF9zeW1ib2w6IE1hcHBlZFtPcHRpb25hbFtzdHJdXSA9IG1hcHBlZF9jb2x1bW4oVGV4dCkNCiAgICByZWxhdGlvbl90eXBlOiBNYXBwZWRbT3B0aW9uYWxbc3RyXV0gPSBtYXBwZWRfY29sdW1uKFN0cmluZygzMikpDQoNCiAgICB1bmlxdWVfa2V5X2hhc2g6IE1hcHBlZFtPcHRpb25hbFtzdHJdXSA9IG1hcHBlZF9jb2x1bW4oVGV4dCkNCiAgICBzdGF0dXM6IE1hcHBlZFtzdHJdID0gbWFwcGVkX2NvbHVtbihTdHJpbmcoMTYpLCBkZWZhdWx0PSJhY3RpdmUiLCBudWxsYWJsZT1GYWxzZSkNCg0KICAgIGRpc2NvdmVyZWRfYXQ6IE1hcHBlZFtkYXRldGltZV0gPSBtYXBwZWRfY29sdW1uKFRJTUVTVEFNUCwgc2VydmVyX2RlZmF1bHQ9ZnVuYy5ub3coKSkNCiAgICBsYXN0X3NlZW5fYXQ6IE1hcHBlZFtkYXRldGltZV0gPSBtYXBwZWRfY29sdW1uKFRJTUVTVEFNUCwgc2VydmVyX2RlZmF1bHQ9ZnVuYy5ub3coKSkNCiAgICByZXNvbHZlZF9hdDogTWFwcGVkW09wdGlvbmFsW2RhdGV0aW1lXV0gPSBtYXBwZWRfY29sdW1uKFRJTUVTVEFNUCkNCg0KICAgIG9jY3VycmVuY2VzOiBNYXBwZWRbaW50XSA9IG1hcHBlZF9jb2x1bW4oSW50ZWdlciwgZGVmYXVsdD0xKQ0KICAgIHJlY3VycmVuY2VfY291bnQ6IE1hcHBlZFtpbnRdID0gbWFwcGVkX2NvbHVtbihJbnRlZ2VyLCBkZWZhdWx0PTApDQoNCiAgICBjcmVhdGVkX2F0OiBNYXBwZWRbZGF0ZXRpbWVdID0gbWFwcGVkX2NvbHVtbihUSU1FU1RBTVAsIHNlcnZlcl9kZWZhdWx0PWZ1bmMubm93KCksIG51bGxhYmxlPUZhbHNlKQ0KICAgIHVwZGF0ZWRfYXQ6IE1hcHBlZFtkYXRldGltZV0gPSBtYXBwZWRfY29sdW1uKFRJTUVTVEFNUCwgc2VydmVyX2RlZmF1bHQ9ZnVuYy5ub3coKSwgb251cGRhdGU9ZnVuYy5ub3coKSwgbnVsbGFibGU9RmFsc2UpDQoNCiAgICBtZGF0YTogTWFwcGVkW3N0cl0gPSBtYXBwZWRfY29sdW1uKFRleHQsIGRlZmF1bHQ9Int9IikNCg0KICAgIF9fdGFibGVfYXJnc19fID0gKA0KICAgICAgICBJbmRleCgiaWR4X2ludHJvc3BlY3RfZmlsZV9zeW1ib2wiLCAiZmlsZXBhdGgiLCAic3ltYm9sX3R5cGUiKSwNCiAgICAgICAgSW5kZXgoImlkeF9pbnRyb3NwZWN0X3JlbGF0aW9uX3R5cGUiLCAicmVsYXRpb25fdHlwZSIpLA0KICAgICAgICBJbmRleCgiaWR4X2ludHJvc3BlY3RfYWdfdGFnIiwgImFnX3RhZyIpLA0KICAgICAgICBJbmRleCgiaWR4X2ludHJvc3BlY3Rfa2V5X2hhc2giLCAidW5pcXVlX2tleV9oYXNoIiksDQogICAgICAgIFVuaXF1ZUNvbnN0cmFpbnQoInVuaXF1ZV9rZXlfaGFzaCIsIG5hbWU9InVxX2ludHJvc3BlY3Rfa2V5IiksDQogICAgICAgIFVuaXF1ZUNvbnN0cmFpbnQoImZpbGVwYXRoIiwgInN5bWJvbF90eXBlIiwgIm5hbWUiLCAibGluZW5vIiwgbmFtZT0idXFfaW50cm9zcGVjdF9uYXR1cmFsIiksDQogICAgKQ0KDQogICAgQHByb3BlcnR5DQogICAgZGVmIG1kYXRhX29iaihzZWxmKSAtPiBEaWN0W3N0ciwgQW55XToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcmV0dXJuIGpzb24ubG9hZHMoc2VsZi5tZGF0YSBvciAie30iKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uOg0KICAgICAgICAgICAgcmV0dXJuIHt9DQoNCiAgICBAbWRhdGFfb2JqLnNldHRlcg0KICAgIGRlZiBtZGF0YV9vYmooc2VsZiwgdmFsdWU6IERpY3Rbc3RyLCBBbnldKSAtPiBOb25lOg0KICAgICAgICBzZWxmLm1kYXRhID0ganNvbi5kdW1wcyh2YWx1ZSBvciB7fSkNCg0KDQojIC0tLS0tLS0tLS0gUHlkYW50aWMgRFRPcyAtLS0tLS0tLS0tDQpmcm9tIHB5ZGFudGljIGltcG9ydCBCYXNlTW9kZWwsIEZpZWxkLCB2YWxpZGF0b3INCg0KY2xhc3MgSW50cm9zcGVjdGlvbkluZGV4SW4oQmFzZU1vZGVsKToNCiAgICBmaWxlcGF0aDogc3RyDQogICAgc3ltYm9sX3R5cGU6IFN5bWJvbFR5cGUgPSAidW5rbm93biINCiAgICBuYW1lOiBPcHRpb25hbFtzdHJdID0gTm9uZQ0KICAgIGxpbmVubzogaW50ID0gMA0KICAgIHJvdXRlX21ldGhvZDogT3B0aW9uYWxbc3RyXSA9IE5vbmUNCiAgICByb3V0ZV9wYXRoOiBPcHRpb25hbFtzdHJdID0gTm9uZQ0KICAgIGFnX3RhZzogT3B0aW9uYWxbc3RyXSA9IE5vbmUNCiAgICBkZXNjcmlwdGlvbjogT3B0aW9uYWxbc3RyXSA9IE5vbmUNCiAgICB0YXJnZXRfc3ltYm9sOiBPcHRpb25hbFtzdHJdID0gTm9uZQ0KICAgIHJlbGF0aW9uX3R5cGU6IE9wdGlvbmFsW3N0cl0gPSBOb25lDQoNCiAgICB1bmlxdWVfa2V5X2hhc2g6IE9wdGlvbmFsW3N0cl0gPSBOb25lDQogICAgc3RhdHVzOiBTdGF0dXNUeXBlID0gImFjdGl2ZSINCiAgICBkaXNjb3ZlcmVkX2F0OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lDQogICAgbGFzdF9zZWVuX2F0OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lDQogICAgcmVzb2x2ZWRfYXQ6IE9wdGlvbmFsW2RhdGV0aW1lXSA9IE5vbmUNCg0KICAgIG9jY3VycmVuY2VzOiBpbnQgPSAxDQogICAgcmVjdXJyZW5jZV9jb3VudDogaW50ID0gMA0KDQogICAgbWRhdGE6IERpY3Rbc3RyLCBBbnldID0gRmllbGQoZGVmYXVsdF9mYWN0b3J5PWRpY3QpDQoNCiAgICBAdmFsaWRhdG9yKCJtZGF0YSIsIHByZT1UcnVlKQ0KICAgIGRlZiBfY29lcmNlX21kYXRhKGNscywgdik6DQogICAgICAgIGlmIGlzaW5zdGFuY2Uodiwgc3RyKToNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICByZXR1cm4ganNvbi5sb2Fkcyh2KQ0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoNCiAgICAgICAgICAgICAgICByZXR1cm4ge30NCiAgICAgICAgcmV0dXJuIHYgb3Ige30NCg0KY2xhc3MgSW50cm9zcGVjdGlvbkluZGV4T3V0KEludHJvc3BlY3Rpb25JbmRleEluKToNCiAgICBpZDogaW50DQogICAgY3JlYXRlZF9hdDogZGF0ZXRpbWUNCiAgICB1cGRhdGVkX2F0OiBkYXRldGltZQ0KDQogICAgY2xhc3MgQ29uZmlnOg0KICAgICAgICBvcm1fbW9kZSA9IFRydWUNCg==", "path": "output/patch_code_bundles/models/introspection_index.py", "sha256_chunk": "dce005c46d72062cf85efdc7943830ab86dd78a4d327dccf886acc5aa8495de3", "sha256_file": "dce005c46d72062cf85efdc7943830ab86dd78a4d327dccf886acc5aa8495de3", "type": "file_chunk"}
{"byte_end": 2577, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "IiIiDQpJbnRyb3NwZWN0aW9uIEluZGV4IE1vZGVscw0KQ2FwdHVyZXMgc3RydWN0dXJhbCBjb2RlIHN5bWJvbHMgKGZ1bmN0aW9ucywgY2xhc3Nlcywgcm91dGVzKSBhbmQgdGhlaXIgcmVsYXRpb25zaGlwcy4NCg0KU2NoZW1hOiBpbnRyb3NwZWN0aW9uX2luZGV4DQoiIiINCg0KZnJvbSB0eXBpbmcgaW1wb3J0IE9wdGlvbmFsDQpmcm9tIHB5ZGFudGljIGltcG9ydCBCYXNlTW9kZWwsIEZpZWxkDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQ0KZnJvbSBzcWxhbGNoZW15IGltcG9ydCAoDQogICAgICAgIENvbHVtbiwgSW50ZWdlciwgU3RyaW5nLCBUZXh0LCBUSU1FU1RBTVANCiAgICApDQpmcm9tIHNxbGFsY2hlbXkuc3FsIGltcG9ydCBmdW5jDQpmcm9tIHNxbGFsY2hlbXkuZXh0LmRlY2xhcmF0aXZlIGltcG9ydCBkZWNsYXJhdGl2ZV9iYXNlDQpCYXNlID0gZGVjbGFyYXRpdmVfYmFzZSgpDQpTUUxBTENIRU1ZX0FWQUlMQUJMRSA9IFRydWUNCg0KIyAtLS0tIFNRTEFsY2hlbXkgT1JNIE1vZGVsIC0tLS0NCg0KDQoNCmlmIFNRTEFMQ0hFTVlfQVZBSUxBQkxFOg0KICAgIGNsYXNzIEludHJvc3BlY3Rpb25JbmRleChCYXNlKToNCiAgICAgICAgX190YWJsZW5hbWVfXyA9ICJpbnRyb3NwZWN0aW9uX2luZGV4Ig0KDQogICAgICAgIGlkID0gQ29sdW1uKEludGVnZXIsIHByaW1hcnlfa2V5PVRydWUpDQogICAgICAgIGZpbGVwYXRoID0gQ29sdW1uKFRleHQsIG51bGxhYmxlPUZhbHNlKQ0KICAgICAgICBzeW1ib2xfdHlwZSA9IENvbHVtbihTdHJpbmcoNjQpLCBudWxsYWJsZT1GYWxzZSwgZGVmYXVsdD0idW5rbm93biIpDQogICAgICAgIG5hbWUgPSBDb2x1bW4oVGV4dCkNCiAgICAgICAgbGluZW5vID0gQ29sdW1uKEludGVnZXIsIGRlZmF1bHQ9MCkNCiAgICAgICAgcm91dGVfbWV0aG9kID0gQ29sdW1uKFN0cmluZygxNikpDQogICAgICAgIHJvdXRlX3BhdGggPSBDb2x1bW4oVGV4dCkNCiAgICAgICAgYWdfdGFnID0gQ29sdW1uKFN0cmluZygzMikpDQogICAgICAgIGRlc2NyaXB0aW9uID0gQ29sdW1uKFRleHQpDQogICAgICAgIHRhcmdldF9zeW1ib2wgPSBDb2x1bW4oVGV4dCkNCiAgICAgICAgcmVsYXRpb25fdHlwZSA9IENvbHVtbihTdHJpbmcoMzIpKQ0KDQogICAgICAgIHVuaXF1ZV9rZXlfaGFzaCA9IENvbHVtbihUZXh0LCBudWxsYWJsZT1UcnVlKQ0KICAgICAgICBzdGF0dXMgPSBDb2x1bW4oU3RyaW5nKDMyKSwgZGVmYXVsdD0iYWN0aXZlIikNCiAgICAgICAgZGlzY292ZXJlZF9hdCA9IENvbHVtbihUSU1FU1RBTVAsIHNlcnZlcl9kZWZhdWx0PWZ1bmMubm93KCkpDQogICAgICAgIGxhc3Rfc2Vlbl9hdCA9IENvbHVtbihUSU1FU1RBTVAsIHNlcnZlcl9kZWZhdWx0PWZ1bmMubm93KCkpDQogICAgICAgIHJlc29sdmVkX2F0ID0gQ29sdW1uKFRJTUVTVEFNUCwgbnVsbGFibGU9VHJ1ZSkNCg0KICAgICAgICBvY2N1cnJlbmNlcyA9IENvbHVtbihJbnRlZ2VyLCBkZWZhdWx0PTEpDQogICAgICAgIHJlY3VycmVuY2VfY291bnQgPSBDb2x1bW4oSW50ZWdlciwgZGVmYXVsdD0wKQ0KDQogICAgICAgIGNyZWF0ZWRfYXQgPSBDb2x1bW4oVElNRVNUQU1QLCBzZXJ2ZXJfZGVmYXVsdD1mdW5jLm5vdygpLCBudWxsYWJsZT1GYWxzZSkNCiAgICAgICAgdXBkYXRlZF9hdCA9IENvbHVtbihUSU1FU1RBTVAsIHNlcnZlcl9kZWZhdWx0PWZ1bmMubm93KCksIG9udXBkYXRlPWZ1bmMubm93KCksIG51bGxhYmxlPUZhbHNlKQ0KDQoNCiMgLS0tLSBQeWRhbnRpYyBNb2RlbHMgLS0tLQ0KDQpjbGFzcyBJbnRyb3NwZWN0aW9uSW5kZXhJbihCYXNlTW9kZWwpOg0KICAgIGZpbGVwYXRoOiBzdHINCiAgICBzeW1ib2xfdHlwZTogc3RyID0gInVua25vd24iDQogICAgbmFtZTogT3B0aW9uYWxbc3RyXSA9IE5vbmUNCiAgICBsaW5lbm86IGludCA9IDANCiAgICByb3V0ZV9tZXRob2Q6IE9wdGlvbmFsW3N0cl0gPSBOb25lDQogICAgcm91dGVfcGF0aDogT3B0aW9uYWxbc3RyXSA9IE5vbmUNCiAgICBhZ190YWc6IE9wdGlvbmFsW3N0cl0gPSBOb25lDQogICAgZGVzY3JpcHRpb246IE9wdGlvbmFsW3N0cl0gPSBOb25lDQogICAgdGFyZ2V0X3N5bWJvbDogT3B0aW9uYWxbc3RyXSA9IE5vbmUNCiAgICByZWxhdGlvbl90eXBlOiBPcHRpb25hbFtzdHJdID0gTm9uZQ0KDQogICAgdW5pcXVlX2tleV9oYXNoOiBPcHRpb25hbFtzdHJdID0gTm9uZQ0KICAgIHN0YXR1czogc3RyID0gImFjdGl2ZSINCiAgICBkaXNjb3ZlcmVkX2F0OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lDQogICAgbGFzdF9zZWVuX2F0OiBPcHRpb25hbFtkYXRldGltZV0gPSBOb25lDQogICAgcmVzb2x2ZWRfYXQ6IE9wdGlvbmFsW2RhdGV0aW1lXSA9IE5vbmUNCg0KICAgIG9jY3VycmVuY2VzOiBpbnQgPSAxDQogICAgcmVjdXJyZW5jZV9jb3VudDogaW50ID0gMA0KDQoNCmNsYXNzIEludHJvc3BlY3Rpb25JbmRleE91dChJbnRyb3NwZWN0aW9uSW5kZXhJbik6DQogICAgaWQ6IGludA0KICAgIGNyZWF0ZWRfYXQ6IGRhdGV0aW1lDQogICAgdXBkYXRlZF9hdDogZGF0ZXRpbWUNCg0KICAgIGNsYXNzIENvbmZpZzoNCiAgICAgICAgb3JtX21vZGUgPSBUcnVlDQoNCg0K", "path": "output/patch_code_bundles/models/introspection_index_OLD.py", "sha256_chunk": "8392d69b37ead0c00a1f4200e909b8b636388aca476ea8f868a7381db4d133b9", "sha256_file": "8392d69b37ead0c00a1f4200e909b8b636388aca476ea8f868a7381db4d133b9", "type": "file_chunk"}
{"byte_end": 52, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "IiIiQ29yZSBwcmltaXRpdmVzOiBlcnJvcnMsIHR5cGVzLCBidWRnZXQsIGxvZ3MuIiIiCg==", "path": "output/patch_code_bundles/patches/__init__.py", "sha256_chunk": "70fd98b1c6d663e0238a8c065f20af6454a5c985ed8cf94a50535f9b064f89f8", "sha256_file": "70fd98b1c6d663e0238a8c065f20af6454a5c985ed8cf94a50535f9b064f89f8", "type": "file_chunk"}
{"byte_end": 52, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "IiIiQ29yZSBwcmltaXRpdmVzOiBlcnJvcnMsIHR5cGVzLCBidWRnZXQsIGxvZ3MuIiIiCg==", "path": "output/patch_code_bundles/patches/core/__init__.py", "sha256_chunk": "70fd98b1c6d663e0238a8c065f20af6454a5c985ed8cf94a50535f9b064f89f8", "sha256_file": "70fd98b1c6d663e0238a8c065f20af6454a5c985ed8cf94a50535f9b064f89f8", "type": "file_chunk"}
{"byte_end": 3140, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKaW1wb3J0IGRpZmZsaWIKaW1wb3J0IGhhc2hsaWIKZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzCmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aApmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwKCmZyb20gdjIuYmFja2VuZC5jb3JlLnV0aWxzLmlvLmZpbGVfb3BzIGltcG9ydCBGaWxlT3BzCgoKQGRhdGFjbGFzcwpjbGFzcyBQYXRjaE9wczoKICAgIGZpbGVfb3BzOiBGaWxlT3BzCgogICAgZGVmIF9wYXRjaF9wYXRoKHNlbGYsIHJvb3Q6IFBhdGgsIGJhc2VfbmFtZTogc3RyLCBzdWZmaXg6IE9wdGlvbmFsW3N0cl0gPSBOb25lKSAtPiBQYXRoOgogICAgICAgICIiIgogICAgICAgIEJ1aWxkIGEgZGV0ZXJtaW5pc3RpYyBwYXRjaCBwYXRoIHVuZGVyIDxyb290Pi9wYXRjaGVzLgogICAgICAgIElmIHN1ZmZpeCBpcyBwcm92aWRlZCAoZS5nLiwgJ19fPGlkPicpLCBpdCdzIGFwcGVuZGVkIGJlZm9yZSAnLnBhdGNoJy4KICAgICAgICAiIiIKICAgICAgICBwYXRjaGVzX2RpciA9IHJvb3QgLyAicGF0Y2hlcyIKICAgICAgICBwYXRjaGVzX2Rpci5ta2RpcihwYXJlbnRzPVRydWUsIGV4aXN0X29rPVRydWUpCiAgICAgICAgbmFtZSA9IGYie2Jhc2VfbmFtZX17c3VmZml4IG9yICcnfS5wYXRjaCIKICAgICAgICByZXR1cm4gcGF0Y2hlc19kaXIgLyBuYW1lCgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF91bmlmaWVkX2RpZmYoCiAgICAgICAgb3JpZ2luYWxfdGV4dDogc3RyLAogICAgICAgIHVwZGF0ZWRfdGV4dDogc3RyLAogICAgICAgIHJlbHBhdGhfbGFiZWw6IHN0ciwKICAgICAgICBjb250ZXh0X2xpbmVzOiBpbnQgPSAzLAogICAgKSAtPiBzdHI6CiAgICAgICAgIiIiCiAgICAgICAgQ3JlYXRlIGEgdW5pZmllZCBkaWZmIHdpdGggbWluaW1hbCwgcmVhZGFibGUgY29udGV4dC4KICAgICAgICBBbHdheXMgcmV0dXJucyB0ZXh0IHdpdGggdHJhaWxpbmcgbmV3bGluZS4KICAgICAgICAiIiIKICAgICAgICBvcmlnX2xpbmVzID0gb3JpZ2luYWxfdGV4dC5zcGxpdGxpbmVzKGtlZXBlbmRzPVRydWUpCiAgICAgICAgbmV3X2xpbmVzID0gdXBkYXRlZF90ZXh0LnNwbGl0bGluZXMoa2VlcGVuZHM9VHJ1ZSkKCiAgICAgICAgIyBIZWFkZXIgbGFiZWxzIGFyZSBpbmZvcm1hdGl2ZSwgbm90IGZpbGUgc3lzdGVtIHBhdGhzCiAgICAgICAgZnJvbWZpbGUgPSBmImEve3JlbHBhdGhfbGFiZWx9IgogICAgICAgIHRvZmlsZSA9IGYiYi97cmVscGF0aF9sYWJlbH0iCiAgICAgICAgZGlmZiA9IGRpZmZsaWIudW5pZmllZF9kaWZmKAogICAgICAgICAgICBvcmlnX2xpbmVzLAogICAgICAgICAgICBuZXdfbGluZXMsCiAgICAgICAgICAgIGZyb21maWxlPWZyb21maWxlLAogICAgICAgICAgICB0b2ZpbGU9dG9maWxlLAogICAgICAgICAgICBuPWNvbnRleHRfbGluZXMsCiAgICAgICAgICAgIGxpbmV0ZXJtPSIiLCAgIyBhdm9pZCBkb3VibGUgbmV3bGluZXM7IHdlJ2xsIGFkZCBhdCB0aGUgZW5kCiAgICAgICAgKQogICAgICAgIHRleHQgPSAiXG4iLmpvaW4oZGlmZikKICAgICAgICBpZiBub3QgdGV4dC5lbmRzd2l0aCgiXG4iKToKICAgICAgICAgICAgdGV4dCArPSAiXG4iCiAgICAgICAgcmV0dXJuIHRleHQKCiAgICBkZWYgd3JpdGVfcGF0Y2goCiAgICAgICAgc2VsZiwKICAgICAgICBydW5fcm9vdDogUGF0aCwKICAgICAgICBiYXNlX25hbWU6IHN0ciwKICAgICAgICBvcmlnaW5hbF9zcmM6IHN0ciwKICAgICAgICB1cGRhdGVkX3NyYzogc3RyLAogICAgICAgIHJlbHBhdGhfbGFiZWw6IHN0ciwKICAgICAgICAqLAogICAgICAgIHBlcl9pdGVtX3N1ZmZpeDogT3B0aW9uYWxbc3RyXSA9IE5vbmUsCiAgICApIC0+IFBhdGg6CiAgICAgICAgIiIiCiAgICAgICAgV3JpdGUgYSB1bmlmaWVkIGRpZmYgcGF0Y2ggZmlsZS4KICAgICAgICAtIGJhc2VfbmFtZTogc2FuaXRpemVkIGZpbGUgc3RlbSAoZS5nLiwgJ2JhY2tlbmRfX21haW4ucHknKQogICAgICAgIC0gcGVyX2l0ZW1fc3VmZml4OiBsaWtlICdfXzxpZD4nIGZvciBwZXItaXRlbSBhcnRpZmFjdHMKICAgICAgICBSZXR1cm5zIHRoZSBwYXRjaCBwYXRoLgogICAgICAgICIiIgogICAgICAgICMgSWYgbm8gY2hhbmdlLCBkbyBub3RoaW5nCiAgICAgICAgaWYgb3JpZ2luYWxfc3JjID09IHVwZGF0ZWRfc3JjOgogICAgICAgICAgICAjIEJ1aWxkIGEgc3RhYmxlLCB0aW55IGhhc2ggdG8gaW5jbHVkZSBpbiB0aGUgZmlsZW5hbWUgdG8gYXZvaWQgbWlzbGVhZGluZyBkdXBsaWNhdGVzCiAgICAgICAgICAgIG5vb3BfaGFzaCA9IGhhc2hsaWIuc2hhMSgocmVscGF0aF9sYWJlbCArIG9yaWdpbmFsX3NyYykuZW5jb2RlKCJ1dGYtOCIpKS5oZXhkaWdlc3QoKVs6OF0KICAgICAgICAgICAgcGF0aCA9IHNlbGYuX3BhdGNoX3BhdGgocnVuX3Jvb3QsIGJhc2VfbmFtZSwgcGVyX2l0ZW1fc3VmZml4IG9yIGYiX19ub29wX3tub29wX2hhc2h9IikKICAgICAgICAgICAgc2VsZi5maWxlX29wcy53cml0ZV90ZXh0KHBhdGgsICIjIG5vIGNoYW5nZXNcbiIpCiAgICAgICAgICAgIHJldHVybiBwYXRoCgogICAgICAgIGRpZmZfdGV4dCA9IHNlbGYuX3VuaWZpZWRfZGlmZihvcmlnaW5hbF9zcmMsIHVwZGF0ZWRfc3JjLCByZWxwYXRoX2xhYmVsKQogICAgICAgIHBhdGggPSBzZWxmLl9wYXRjaF9wYXRoKHJ1bl9yb290LCBiYXNlX25hbWUsIHBlcl9pdGVtX3N1ZmZpeCkKICAgICAgICBzZWxmLmZpbGVfb3BzLndyaXRlX3RleHQocGF0aCwgZGlmZl90ZXh0KQogICAgICAgIHJldHVybiBwYXRoCgogICAgZGVmIGFwcGx5X3RvX3NhbmRib3goc2VsZiwgcnVuX3Jvb3Q6IFBhdGgsIHJlbHBhdGg6IHN0ciwgdXBkYXRlZF9zcmM6IHN0cikgLT4gUGF0aDoKICAgICAgICAiIiIKICAgICAgICBXcml0ZXMgdGhlIHVwZGF0ZWQgZmlsZSBpbnRvIDxyb290Pi9zYW5kYm94X2FwcGxpZWQvPHJlbHBhdGg+LgogICAgICAgICIiIgogICAgICAgIGRzdCA9IHJ1bl9yb290IC8gInNhbmRib3hfYXBwbGllZCIgLyByZWxwYXRoCiAgICAgICAgZHN0LnBhcmVudC5ta2RpcihwYXJlbnRzPVRydWUsIGV4aXN0X29rPVRydWUpCiAgICAgICAgc2VsZi5maWxlX29wcy53cml0ZV90ZXh0KGRzdCwgdXBkYXRlZF9zcmMpCiAgICAgICAgcmV0dXJuIGRzdAo=", "path": "output/patch_code_bundles/patches/core/patch_ops.py", "sha256_chunk": "3b228a058826c3234cc857061bbfe53c74ae804593f30b1e6eb4d92b25cfec80", "sha256_file": "3b228a058826c3234cc857061bbfe53c74ae804593f30b1e6eb4d92b25cfec80", "type": "file_chunk"}
{"byte_end": 6520, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/patches/core/rewrite.py", "sha256_chunk": "22f4657523a46b8ed3952608b5f41b3c0163be200973d6604bafbc6e5a95bc9d", "sha256_file": "22f4657523a46b8ed3952608b5f41b3c0163be200973d6604bafbc6e5a95bc9d", "type": "file_chunk"}
{"byte_end": 52, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "IiIiQ29yZSBwcmltaXRpdmVzOiBlcnJvcnMsIHR5cGVzLCBidWRnZXQsIGxvZ3MuIiIiCg==", "path": "output/patch_code_bundles/patches/executor/__init__.py", "sha256_chunk": "70fd98b1c6d663e0238a8c065f20af6454a5c985ed8cf94a50535f9b064f89f8", "sha256_file": "70fd98b1c6d663e0238a8c065f20af6454a5c985ed8cf94a50535f9b064f89f8", "type": "file_chunk"}
{"byte_end": 4010, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmltcG9ydCB0eXBlcgoKIyBQcmVmZXIgYWJzb2x1dGUgaW1wb3J0cyBoZXJlIHRvIGF2b2lkICJubyBwYXJlbnQgcGFja2FnZSIgaXNzdWVzCmZyb20gdjIuYmFja2VuZC5jb3JlLmNvbmZpZ3VyYXRpb24uY29uZmlnIGltcG9ydCBQYXRjaExvb3BDb25maWcKZnJvbSB2Mi5iYWNrZW5kLmNvcmUucHJvbXB0X3BpcGVsaW5lLmV4ZWN1dG9yLm9yY2hlc3RyYXRvciBpbXBvcnQgT3JjaGVzdHJhdG9yCgojIFBlciB5b3VyIGluc3RydWN0aW9uOiBleHBsaWNpdCBoYXJkY29kZWQga2V5IChubyBlbnZzL2tleSB2YXVsdHMgeWV0KQpIQVJEQ09ERURfT1BFTkFJX0FQSV9LRVk6IHN0ciB8IE5vbmUgPSBOb25lICAjIDwtLSBwbGFjZSBhIGtleSBoZXJlIGlmIHlvdSB3YW50IGEgZGVmYXVsdAoKYXBwID0gdHlwZXIuVHlwZXIoYWRkX2NvbXBsZXRpb249RmFsc2UsIG5vX2FyZ3NfaXNfaGVscD1UcnVlKQoKCkBhcHAuY29tbWFuZCgicnVuIikKZGVmIHJ1bigKICAgIHByb2plY3Rfcm9vdDogUGF0aCA9IHR5cGVyLk9wdGlvbihQYXRoKCIiKSwgaGVscD0iUHJvamVjdCByb290IGZvciByZXNvbHZpbmcgZmlsZXBhdGhzIiksCiAgICBvdXRfYmFzZTogUGF0aCA9IHR5cGVyLk9wdGlvbihQYXRoKCIuLi8uLi8uLi9vdXRwdXQvcGF0Y2hlc19yZWNlaXZlZCIpLCBoZWxwPSJCYXNlIG91dHB1dCBkaXIiKSwKICAgIHJ1bl9pZF9zdWZmaXg6IHN0ciA9IHR5cGVyLk9wdGlvbihOb25lLCBoZWxwPSJPcHRpb25hbCBzdWZmaXggZm9yIHJ1biBpZCIpLAogICAgZGJfdXJsOiBzdHIgPSB0eXBlci5PcHRpb24oLi4uLCAiLS1kYi11cmwiLCBoZWxwPSJTUUxBbGNoZW15IFVSTCBmb3IgaW50cm9zcGVjdGlvbiBEQiAocmVxdWlyZWQpIiksCiAgICB0YWJsZTogc3RyID0gdHlwZXIuT3B0aW9uKCJpbnRyb3NwZWN0aW9uX2luZGV4IiwgaGVscD0iVGFibGUgbmFtZSIpLAogICAgc3RhdHVzOiBzdHIgPSB0eXBlci5PcHRpb24oImFjdGl2ZSIsIGhlbHA9IkZpbHRlciBieSBzdGF0dXM7IHBhc3MgJycgdG8gZGlzYWJsZSIpLAogICAgbWF4X3Jvd3M6IGludCA9IHR5cGVyLk9wdGlvbihOb25lLCBoZWxwPSJMaW1pdCBudW1iZXIgb2Ygcm93cyBmcm9tIERCIiksCiAgICBtb2RlbDogc3RyID0gdHlwZXIuT3B0aW9uKCJhdXRvIiwgaGVscD0iTW9kZWwgbmFtZSBvciAnYXV0byciKSwKICAgIHByb3ZpZGVyOiBzdHIgPSB0eXBlci5PcHRpb24oIm1vY2siLCBoZWxwPSJMTE0gcHJvdmlkZXI6IG1vY2sgb3Igb3BlbmFpIiksCiAgICBhcGlfa2V5OiBzdHIgPSB0eXBlci5PcHRpb24oTm9uZSwgaGVscD0iQVBJIGtleSBpZiBwcm92aWRlcj0nb3BlbmFpJyIpLAogICAgIyBTdGVwIHRvZ2dsZXMKICAgIHJ1bl9zY2FuX2RvY3N0cmluZ3M6IGJvb2wgPSB0eXBlci5PcHRpb24oVHJ1ZSwgaGVscD0iU3RlcCAxOiBzY2FuIHNvdXJjZSBmb3IgZG9jc3RyaW5ncyAoZXh0ZXJuYWwgdG9vbCkiKSwKICAgIHJ1bl9nZXRfY29kZV9mb3JfZG9jc3RyaW5nczogYm9vbCA9IHR5cGVyLk9wdGlvbihUcnVlLCBoZWxwPSJTdGVwIDIiKSwKICAgIHJ1bl9idWlsZF9wcm9tcHRzOiBib29sID0gdHlwZXIuT3B0aW9uKFRydWUsIGhlbHA9IlN0ZXAgMyIpLAogICAgcnVuX3J1bl9sbG06IGJvb2wgPSB0eXBlci5PcHRpb24oVHJ1ZSwgaGVscD0iU3RlcCA0IiksCiAgICBydW5fc2F2ZV9wYXRjaDogYm9vbCA9IHR5cGVyLk9wdGlvbihUcnVlLCBoZWxwPSJTdGVwIDUiKSwKICAgIHJ1bl9hcHBseV9wYXRjaF9zYW5kYm94OiBib29sID0gdHlwZXIuT3B0aW9uKFRydWUsIGhlbHA9IlN0ZXAgNiIpLAogICAgcnVuX3ZlcmlmeV9kb2NzdHJpbmc6IGJvb2wgPSB0eXBlci5PcHRpb24oVHJ1ZSwgaGVscD0iU3RlcCA3IiksCiAgICBydW5fYXJjaGl2ZV9hbmRfcmVwbGFjZTogYm9vbCA9IHR5cGVyLk9wdGlvbihUcnVlLCBoZWxwPSJTdGVwIDgiKSwKICAgIHJ1bl9yb2xsYmFjazogYm9vbCA9IHR5cGVyLk9wdGlvbihUcnVlLCBoZWxwPSJTdGVwIDkiKSwKICAgICMgU2FmZXR5IGNvbmZpcm1hdGlvbiBmb3IgcHJvZCB3cml0ZXMgKHN0ZXBzIDggJiA5KQogICAgY29uZmlybV9wcm9kX3dyaXRlczogYm9vbCA9IHR5cGVyLk9wdGlvbihGYWxzZSwgaGVscD0iUkVRVUlSRUQgdG8gcGVyZm9ybSBhcmNoaXZlL3JlcGxhY2UgYW5kIHJvbGxiYWNrIG9wZXJhdGlvbnMiKSwKICAgICMgTmV3bGluZSBoYW5kbGluZwogICAgcHJlc2VydmVfY3JsZjogYm9vbCA9IHR5cGVyLk9wdGlvbihGYWxzZSwgaGVscD0iUHJlc2VydmUgQ1JMRiBvbiB3cml0ZSB3aGVuIHRoZSBvcmlnaW5hbCBmaWxlIHVzZWQgQ1JMRiIpLAogICAgdmVyYm9zZTogYm9vbCA9IHR5cGVyLk9wdGlvbihUcnVlLCBoZWxwPSJWZXJib3NlIGNvbnNvbGUgb3V0cHV0IChwcm9tcHQgcHJldmlldykiKSwKICAgICMgTkVXOiBhcnRpZmFjdCB0b2dnbGVzCiAgICBzYXZlX3Blcl9pdGVtX3BhdGNoZXM6IGJvb2wgPSB0eXBlci5PcHRpb24oCiAgICAgICAgVHJ1ZSwKICAgICAgICBoZWxwPSJXcml0ZSBpbmRpdmlkdWFsIHBhdGNoIGZpbGVzIHBlciBEQiBpdGVtIChnb29kIGZvciBzZWxlY3RpdmUgYXBwbHkvYXVkaXQpLiIsCiAgICApLAogICAgc2F2ZV9jb21iaW5lZF9wYXRjaDogYm9vbCA9IHR5cGVyLk9wdGlvbigKICAgICAgICBUcnVlLAogICAgICAgIGhlbHA9IkFsc28gd3JpdGUgYSBzaW5nbGUgY29tYmluZWQgcGF0Y2ggcGVyIHNvdXJjZSBmaWxlIChnb29kIGZvciBmaW5hbCBhcHBseSkuIiwKICAgICksCik6CiAgICBjZmcgPSBQYXRjaExvb3BDb25maWcoCiAgICAgICAgcHJvamVjdF9yb290PVBhdGgocHJvamVjdF9yb290KSwKICAgICAgICBvdXRfYmFzZT1QYXRoKG91dF9iYXNlKSwKICAgICAgICBydW5faWRfc3VmZml4PXJ1bl9pZF9zdWZmaXgsCiAgICAgICAgc3FsYWxjaGVteV91cmw9ZGJfdXJsLAogICAgICAgIHNxbGFsY2hlbXlfdGFibGU9dGFibGUsCiAgICAgICAgc3RhdHVzX2ZpbHRlcj0oc3RhdHVzIGlmIHN0YXR1cyBlbHNlIE5vbmUpLAogICAgICAgIG1heF9yb3dzPW1heF9yb3dzLAogICAgICAgIG1vZGVsPW1vZGVsLAogICAgICAgIHByb3ZpZGVyPXByb3ZpZGVyLAogICAgICAgIGFwaV9rZXk9KGFwaV9rZXkgb3IgSEFSRENPREVEX09QRU5BSV9BUElfS0VZKSwKICAgICAgICBydW5fc2Nhbl9kb2NzdHJpbmdzPXJ1bl9zY2FuX2RvY3N0cmluZ3MsCiAgICAgICAgcnVuX2dldF9jb2RlX2Zvcl9kb2NzdHJpbmdzPXJ1bl9nZXRfY29kZV9mb3JfZG9jc3RyaW5ncywKICAgICAgICBydW5fYnVpbGRfcHJvbXB0cz1ydW5fYnVpbGRfcHJvbXB0cywKICAgICAgICBydW5fcnVuX2xsbT1ydW5fcnVuX2xsbSwKICAgICAgICBydW5fc2F2ZV9wYXRjaD1ydW5fc2F2ZV9wYXRjaCwKICAgICAgICBydW5fYXBwbHlfcGF0Y2hfc2FuZGJveD1ydW5fYXBwbHlfcGF0Y2hfc2FuZGJveCwKICAgICAgICBydW5fdmVyaWZ5X2RvY3N0cmluZz1ydW5fdmVyaWZ5X2RvY3N0cmluZywKICAgICAgICBydW5fYXJjaGl2ZV9hbmRfcmVwbGFjZT1ydW5fYXJjaGl2ZV9hbmRfcmVwbGFjZSwKICAgICAgICBydW5fcm9sbGJhY2s9cnVuX3JvbGxiYWNrLAogICAgICAgIGNvbmZpcm1fcHJvZF93cml0ZXM9Y29uZmlybV9wcm9kX3dyaXRlcywKICAgICAgICBwcmVzZXJ2ZV9jcmxmPXByZXNlcnZlX2NybGYsCiAgICAgICAgdmVyYm9zZT12ZXJib3NlLAogICAgKQogICAgIyBPcmNoZXN0cmF0b3IgcmVhZHMgdGhlc2UgdmlhIGdldGF0dHIgd2l0aCBkZWZhdWx0czsgc2V0IGV4cGxpY2l0bHkgZnJvbSBDTEk6CiAgICBjZmcuc2F2ZV9wZXJfaXRlbV9wYXRjaGVzID0gc2F2ZV9wZXJfaXRlbV9wYXRjaGVzCiAgICBjZmcuc2F2ZV9jb21iaW5lZF9wYXRjaCA9IHNhdmVfY29tYmluZWRfcGF0Y2gKCiAgICByb290ID0gT3JjaGVzdHJhdG9yKGNmZykucnVuKCkKICAgIHR5cGVyLmVjaG8oc3RyKHJvb3QpKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBhcHAoKQo=", "path": "output/patch_code_bundles/patches/executor/run_patch_loop.py", "sha256_chunk": "87fcd20cf95f9ca2fa82b6e97bf717d6ecedaf0627ddaeff81fe272b4a027f04", "sha256_file": "87fcd20cf95f9ca2fa82b6e97bf717d6ecedaf0627ddaeff81fe272b4a027f04", "type": "file_chunk"}
{"byte_end": 3038, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "ZnJvbSBfX2Z1dHVyZV9fIGltcG9ydCBhbm5vdGF0aW9ucwoKZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdjIuYmFja2VuZC5jb3JlLmNvbmZpZ3VyYXRpb24uY29uZmlnIGltcG9ydCBQYXRjaExvb3BDb25maWcKZnJvbSB2Mi5iYWNrZW5kLmNvcmUucHJvbXB0X3BpcGVsaW5lLmV4ZWN1dG9yLm9yY2hlc3RyYXRvciBpbXBvcnQgT3JjaGVzdHJhdG9yCmZyb20gc2VjcmV0X21hbmFnZW1lbnQuc2VjcmV0c19sb2FkZXIgaW1wb3J0IGdldF9zZWNyZXQgICMg4oaQIGFkZCB0aGlzIGltcG9ydAoKIyAuLi4KCkFQSV9LRVkgPSBnZXRfc2VjcmV0KCJPUEVOQUlfQVBJX0tFWSIsIGRlZmF1bHQ9IiIpICAjIGxvb2tzIGluIHNlY3JldF9tYW5hZ2VtZW50LywgdGhlbiB+Ly5jb25maWcvcGFja2FnZXIvCgoKIyAtLS0gRURJVCBUSEVTRSBERUZBVUxUUyAtLS0KREJfVVJMICAgICAgICA9IHIic3FsaXRlOi8vL0M6L1VzZXJzL2NnMzcxL1B5Y2hhcm1Qcm9qZWN0cy9DaGF0R1BUIEJvdC9kYXRhYmFzZXMvYm90X2Rldi5kYiIKUFJPSkVDVF9ST09UICA9IFBhdGgociIvIikKT1VUX0JBU0UgICAgICA9IFBhdGgociJDOlxVc2Vyc1xjZzM3MVxQeWNoYXJtUHJvamVjdHNcQ2hhdEdQVCBCb3RcdGVzdHNfYWRob2NccGF0Y2hfbG9vcF90ZXN0MlxvdXRwdXRccGF0Y2hlc190ZXN0IikKUFJPVklERVIgICAgICA9ICJvcGVuYWkiICAgICAgICMgb3IgIm1vY2siCk1PREVMICAgICAgICAgPSAiZ3B0LTRvLW1pbmkiICAjIG9yICJhdXRvIgpBUElfS0VZICAgICAgID0gZ2V0X3NlY3JldCgib3Blbl9hcGkiLCBkZWZhdWx0PSIiKSAgIyBsb29rcyBpbiBzZWNyZXRfbWFuYWdlbWVudC8sIHRoZW4gfi8uY29uZmlnL3BhY2thZ2VyLwpNQVhfUk9XUyAgICAgID0gMTQgICAgICAgICAgICAgICMgc2V0IE5vbmUgZm9yIGFsbCByZWNvcmRzClZFUkJPU0UgICAgICAgPSBUcnVlClBSRVNFUlZFX0NSTEYgPSBGYWxzZQoKIyBTdGVwIHRvZ2dsZXMgKHlvdXIg4oCcY29udHJvbCBib29sZWFuc+KAnSkKUlVOX1NDQU5fRE9DU1RSSU5HUyAgICAgICAgID0gRmFsc2UgICMgc3RlcCAxClJVTl9HRVRfQ09ERV9GT1JfRE9DU1RSSU5HUyA9IFRydWUgICAjIHN0ZXAgMgpSVU5fQlVJTERfUFJPTVBUUyAgICAgICAgICAgPSBUcnVlICAgIyBzdGVwIDMKUlVOX1JVTl9MTE0gICAgICAgICAgICAgICAgID0gVHJ1ZSAgICMgc3RlcCA0ClJVTl9TQVZFX1BBVENIICAgICAgICAgICAgICA9IFRydWUgICAjIHN0ZXAgNQpSVU5fQVBQTFlfUEFUQ0hfU0FOREJPWCAgICAgPSBUcnVlICAgIyBzdGVwIDYKUlVOX1ZFUklGWV9ET0NTVFJJTkcgICAgICAgID0gVHJ1ZSAgICMgc3RlcCA3ClJVTl9BUkNISVZFX0FORF9SRVBMQUNFICAgICA9IEZhbHNlICAjIHN0ZXAgOCAoc2FmZXR5KQpSVU5fUk9MTEJBQ0sgICAgICAgICAgICAgICAgPSBGYWxzZSAgIyBzdGVwIDkgKHNhZmV0eSkKQ09ORklSTV9QUk9EX1dSSVRFUyAgICAgICAgID0gRmFsc2UgICMgZ3VhcmQgZm9yIHN0ZXBzIDggJiA5CgojIE5FVzogYXJ0aWZhY3QgdG9nZ2xlcyAobWF0Y2ggdGhlIENMSSBmbGFncykKU0FWRV9QRVJfSVRFTV9QQVRDSEVTID0gVHJ1ZSAgICMgb25lIHBhdGNoIHBlciBEQiBpdGVtClNBVkVfQ09NQklORURfUEFUQ0ggICA9IEZhbHNlICAgIyBvbmUgY29tYmluZWQgcGF0Y2ggcGVyIHNvdXJjZSBmaWxlCgpkZWYgbWFpbigpOgogICAgY2ZnID0gUGF0Y2hMb29wQ29uZmlnKAogICAgICAgIHByb2plY3Rfcm9vdD1QUk9KRUNUX1JPT1QsCiAgICAgICAgb3V0X2Jhc2U9T1VUX0JBU0UsCiAgICAgICAgcnVuX2lkX3N1ZmZpeD1Ob25lLAogICAgICAgIHNxbGFsY2hlbXlfdXJsPURCX1VSTCwKICAgICAgICBzcWxhbGNoZW15X3RhYmxlPSJpbnRyb3NwZWN0aW9uX2luZGV4IiwKICAgICAgICBzdGF0dXNfZmlsdGVyPSJhY3RpdmUiLCAgICAgICAgICAgIyBzZXQgdG8gTm9uZSB0byBkaXNhYmxlIHN0YXR1cyBmaWx0ZXIKICAgICAgICBtYXhfcm93cz1NQVhfUk9XUywgICAgICAgICAgICAgICAgIyA8LS0g4oCccmVzdHJpY3QgREIgcmVjb3Jkc+KAnSBzd2l0Y2gKICAgICAgICBtb2RlbD1NT0RFTCwKICAgICAgICBwcm92aWRlcj1QUk9WSURFUiwKICAgICAgICBhcGlfa2V5PUFQSV9LRVksICAgICAgICAgICAgICAgICAgIyA8LS0gdXNlcyB0aGlzOyBpZiBOb25lLCBmYWxscyBiYWNrIHRvIGhhcmRjb2RlZCB2YXIgaW4gQ0xJCiAgICAgICAgcnVuX3NjYW5fZG9jc3RyaW5ncz1SVU5fU0NBTl9ET0NTVFJJTkdTLAogICAgICAgIHJ1bl9nZXRfY29kZV9mb3JfZG9jc3RyaW5ncz1SVU5fR0VUX0NPREVfRk9SX0RPQ1NUUklOR1MsCiAgICAgICAgcnVuX2J1aWxkX3Byb21wdHM9UlVOX0JVSUxEX1BST01QVFMsCiAgICAgICAgcnVuX3J1bl9sbG09UlVOX1JVTl9MTE0sCiAgICAgICAgcnVuX3NhdmVfcGF0Y2g9UlVOX1NBVkVfUEFUQ0gsCiAgICAgICAgcnVuX2FwcGx5X3BhdGNoX3NhbmRib3g9UlVOX0FQUExZX1BBVENIX1NBTkRCT1gsCiAgICAgICAgcnVuX3ZlcmlmeV9kb2NzdHJpbmc9UlVOX1ZFUklGWV9ET0NTVFJJTkcsCiAgICAgICAgcnVuX2FyY2hpdmVfYW5kX3JlcGxhY2U9UlVOX0FSQ0hJVkVfQU5EX1JFUExBQ0UsCiAgICAgICAgcnVuX3JvbGxiYWNrPVJVTl9ST0xMQkFDSywKICAgICAgICBjb25maXJtX3Byb2Rfd3JpdGVzPUNPTkZJUk1fUFJPRF9XUklURVMsCiAgICAgICAgcHJlc2VydmVfY3JsZj1QUkVTRVJWRV9DUkxGLAogICAgICAgIHZlcmJvc2U9VkVSQk9TRSwgICAgICAgICAgICAgICAgICAjIDwtLSDigJx2ZXJib3NlIG1vZGXigJ0gc3dpdGNoCiAgICApCiAgICAjIHBhc3MgYXJ0aWZhY3QgdG9nZ2xlcyB0byBPcmNoZXN0cmF0b3IgKG5vIHNjaGVtYSBjaGFuZ2UgbmVlZGVkKQogICAgY2ZnLnNhdmVfcGVyX2l0ZW1fcGF0Y2hlcyA9IFNBVkVfUEVSX0lURU1fUEFUQ0hFUwogICAgY2ZnLnNhdmVfY29tYmluZWRfcGF0Y2ggICA9IFNBVkVfQ09NQklORURfUEFUQ0gKCiAgICBPcmNoZXN0cmF0b3IoY2ZnKS5ydW4oKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo=", "path": "output/patch_code_bundles/patches/executor/run_patch_loop_local.py", "sha256_chunk": "170f9ed860a669089724ca6feeb1cc370e90f39b96af57a51445cc46f0da3f9a", "sha256_file": "170f9ed860a669089724ca6feeb1cc370e90f39b96af57a51445cc46f0da3f9a", "type": "file_chunk"}
{"byte_end": 0, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "output/patch_code_bundles/routes/__init__.py", "sha256_chunk": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "sha256_file": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "type": "file_chunk"}
{"byte_end": 2, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "e30=", "path": "graphs/imports.json", "sha256_chunk": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a", "sha256_file": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a", "type": "file_chunk"}
{"byte_end": 2, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "e30=", "path": "graphs/calls.json", "sha256_chunk": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a", "sha256_file": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a", "type": "file_chunk"}
{"byte_end": 2, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "e30=", "path": "graphs/symbols.json", "sha256_chunk": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a", "sha256_file": "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a", "type": "file_chunk"}
{"byte_end": 22499, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "analysis/contents_index.json", "sha256_chunk": "8b06e1dd048a0f515fd7cb1695afda62b11deb89e2ab2750fadc2862823cbc85", "sha256_file": "8b06e1dd048a0f515fd7cb1695afda62b11deb89e2ab2750fadc2862823cbc85", "type": "file_chunk"}
{"byte_end": 9316, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "", "path": "analysis/roles.json", "sha256_chunk": "fd536be2017a5835a688c90de543655793a9e58dfc00be97e7647985fbb6603e", "sha256_file": "fd536be2017a5835a688c90de543655793a9e58dfc00be97e7647985fbb6603e", "type": "file_chunk"}
{"byte_end": 2282, "byte_start": 0, "chunk_index": 0, "chunks_total": 1, "content_b64": "WwogIHsKICAgICJwYXRoIjogIm91dHB1dC9wYXRjaF9jb2RlX2J1bmRsZXMvYmFja2VuZC9jb3JlL2ludHJvc3BlY3QvcmVhZF9kb2NzdHJpbmdzLnB5IiwKICAgICJyZWFzb24iOiAiaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJyIKICB9LAogIHsKICAgICJwYXRoIjogIm91dHB1dC9wYXRjaF9jb2RlX2J1bmRsZXMvYmFja2VuZC9jb3JlL3V0aWxzL2NvZGVfYnVuZGxlcy9jb2RlX2J1bmRsZXMvb3JjaGVzdHJhdGUucHkiLAogICAgInJlYXNvbiI6ICJpZiBfX25hbWVfXyA9PSAnX19tYWluX18nIgogIH0sCiAgewogICAgInBhdGgiOiAib3V0cHV0L3BhdGNoX2NvZGVfYnVuZGxlcy9iYWNrZW5kL2NvcmUvdXRpbHMvY29kZV9idW5kbGVzL2NvZGVfYnVuZGxlcy9ydW5fcGFjay5weSIsCiAgICAicmVhc29uIjogImlmIF9fbmFtZV9fID09ICdfX21haW5fXyciCiAgfSwKICB7CiAgICAicGF0aCI6ICJvdXRwdXQvcGF0Y2hfY29kZV9idW5kbGVzL2JhY2tlbmQvY29yZS91dGlscy9jb2RlX2J1bmRsZXMvY29kZV9idW5kbGVzL3NyYy9wYWNrYWdlci9jb3JlL29yY2hlc3RyYXRvci5weSIsCiAgICAicmVhc29uIjogImlmIF9fbmFtZV9fID09ICdfX21haW5fXyciCiAgfSwKICB7CiAgICAicGF0aCI6ICJvdXRwdXQvcGF0Y2hfY29kZV9idW5kbGVzL2JhY2tlbmQvY29yZS91dGlscy9jb2RlX2J1bmRsZXMvcGFja2Vycy9tYWtlX2NvZGVfYnVuZGxlLnB5IiwKICAgICJyZWFzb24iOiAiaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJyIKICB9LAogIHsKICAgICJwYXRoIjogIm91dHB1dC9wYXRjaF9jb2RlX2J1bmRsZXMvYmFja2VuZC9jb3JlL3V0aWxzL2NvZGVfYnVuZGxlcy9wYWNrZXJzL3VucGFja19jb2RlX2J1bmRsZS5weSIsCiAgICAicmVhc29uIjogImlmIF9fbmFtZV9fID09ICdfX21haW5fXyciCiAgfSwKICB7CiAgICAicGF0aCI6ICJvdXRwdXQvcGF0Y2hfY29kZV9idW5kbGVzL2JhY2tlbmQvY29yZS91dGlscy9jb2RlX2ZpeGVycy9jaGFuZ2VfaW1wb3J0cy5weSIsCiAgICAicmVhc29uIjogImlmIF9fbmFtZV9fID09ICdfX21haW5fXyciCiAgfSwKICB7CiAgICAicGF0aCI6ICJvdXRwdXQvcGF0Y2hfY29kZV9idW5kbGVzL2JhY2tlbmQvY29yZS91dGlscy9kYi9pbml0X3NxbGl0ZV9kZXYucHkiLAogICAgInJlYXNvbiI6ICJpZiBfX25hbWVfXyA9PSAnX19tYWluX18nIgogIH0sCiAgewogICAgInBhdGgiOiAib3V0cHV0L3BhdGNoX2NvZGVfYnVuZGxlcy9iYWNrZW5kL2NvcmUvdXRpbHMvZGIvbG9hZF9zcWxpdGVfdmVjdG9yX3BsdWdpbi5weSIsCiAgICAicmVhc29uIjogImlmIF9fbmFtZV9fID09ICdfX21haW5fXyciCiAgfSwKICB7CiAgICAicGF0aCI6ICJvdXRwdXQvcGF0Y2hfY29kZV9idW5kbGVzL2JhY2tlbmQvY29yZS91dGlscy9kYi9zcWxpdGVfdmlld2VyLnB5IiwKICAgICJyZWFzb24iOiAiaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJyIKICB9LAogIHsKICAgICJwYXRoIjogIm91dHB1dC9wYXRjaF9jb2RlX2J1bmRsZXMvYmFja2VuZC9jb3JlL3V0aWxzL2Rvd25sb2FkZXJzL2Rvd25sb2FkX2FpX21vZGVscy5weSIsCiAgICAicmVhc29uIjogImlmIF9fbmFtZV9fID09ICdfX21haW5fXyciCiAgfSwKICB7CiAgICAicGF0aCI6ICJvdXRwdXQvcGF0Y2hfY29kZV9idW5kbGVzL2JhY2tlbmQvY29yZS91dGlscy9pby9yZWN1cnNpdmVseV96aXBfZGlyZWN0b3J5LnB5IiwKICAgICJyZWFzb24iOiAiaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJyIKICB9LAogIHsKICAgICJwYXRoIjogIm91dHB1dC9wYXRjaF9jb2RlX2J1bmRsZXMvYmFja2VuZC9jb3JlL3V0aWxzL3NjYW5uZXJzL2NvZGVfaW5kZXhlci5weSIsCiAgICAicmVhc29uIjogImlmIF9fbmFtZV9fID09ICdfX21haW5fXyciCiAgfSwKICB7CiAgICAicGF0aCI6ICJvdXRwdXQvcGF0Y2hfY29kZV9idW5kbGVzL2JhY2tlbmQvY29yZS91dGlscy9zY2FubmVycy9kaXJfY3Jhd2xlci5weSIsCiAgICAicmVhc29uIjogImlmIF9fbmFtZV9fID09ICdfX21haW5fXyciCiAgfSwKICB7CiAgICAicGF0aCI6ICJvdXRwdXQvcGF0Y2hfY29kZV9idW5kbGVzL3BhdGNoZXMvZXhlY3V0b3IvcnVuX3BhdGNoX2xvb3AucHkiLAogICAgInJlYXNvbiI6ICJpZiBfX25hbWVfXyA9PSAnX19tYWluX18nIgogIH0sCiAgewogICAgInBhdGgiOiAib3V0cHV0L3BhdGNoX2NvZGVfYnVuZGxlcy9wYXRjaGVzL2V4ZWN1dG9yL3J1bl9wYXRjaF9sb29wX2xvY2FsLnB5IiwKICAgICJyZWFzb24iOiAiaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJyIKICB9Cl0=", "path": "analysis/entrypoints.json", "sha256_chunk": "9e1b36731809a40b155d9128a4d26a01e1f5aa404bd181ebe3f905532733b728", "sha256_file": "9e1b36731809a40b155d9128a4d26a01e1f5aa404bd181ebe3f905532733b728", "type": "file_chunk"}
