{
  "record_type": "assistant_handoff.v1",
  "version": "2",
  "generated_at": "2025-09-02T11:20:58.907661Z",
  "artifact_root": "design_manifest/",
  "publish": {
    "mode": "both",
    "github": {
      "owner": "gdogg371",
      "repo": "ChatGPT-Agent-AI",
      "branch": "main",
      "base_path": "",
      "raw_base": "https://raw.githubusercontent.com/gdogg371/ChatGPT-Agent-AI/main/"
    }
  },
  "transport": {
    "chunked": false,
    "part_stem": "design_manifest",
    "part_ext": ".txt",
    "parts_per_dir": 10,
    "split_bytes": 150000,
    "preserve_monolith": false,
    "parts_index": "design_manifest/design_manifest_parts_index.json",
    "parts_dir": "design_manifest/"
  },
  "manifest": {
    "path": "design_manifest/design_manifest.jsonl",
    "chunking": {
      "enabled": false,
      "parts_dir": "design_manifest/",
      "parts_index": "design_manifest/design_manifest_parts_index.json",
      "notes": [
        "Read parts_index to get ordered part file refs.",
        "Stream and concatenate part files in the listed order to reconstruct the manifest stream.",
        "Do NOT lexically sort filenames; always follow the index order."
      ]
    },
    "paths": {
      "analysis_dir": "design_manifest/analysis/",
      "run_spec": "design_manifest/superbundle.run.json",
      "handoff": "design_manifest/assistant_handoff.github.v1.json",
      "checksums": {
        "monolith_sha256": "design_manifest/design_manifest.SHA256SUMS",
        "parts_sha256": "design_manifest/design_manifest.SHA256SUMS",
        "algo": "sha256"
      }
    }
  },
  "analysis_files": [
    "design_manifest/analysis/_index.json",
    "design_manifest/analysis/asset.summary.json",
    "design_manifest/analysis/ast.calls.summary.json",
    "design_manifest/analysis/ast.imports.summary.json",
    "design_manifest/analysis/ast.symbols.summary.json",
    "design_manifest/analysis/codeowners.summary.json",
    "design_manifest/analysis/cs.summary.json",
    "design_manifest/analysis/deps.index.summary.json",
    "design_manifest/analysis/docs.coverage.summary.json",
    "design_manifest/analysis/entrypoints.summary.json",
    "design_manifest/analysis/env.summary.json",
    "design_manifest/analysis/git.info.summary.json",
    "design_manifest/analysis/html.summary.json",
    "design_manifest/analysis/js.index.summary.json",
    "design_manifest/analysis/license.summary.json",
    "design_manifest/analysis/manifest.summary.json",
    "design_manifest/analysis/quality.complexity.summary.json",
    "design_manifest/analysis/secrets.summary.json",
    "design_manifest/analysis/sql.index.summary.json"
  ],
  "quickstart": [
    "## Reconstructing the manifest",
    "",
    "1. Read `manifest.paths.chunking.parts_index` and follow the `parts` array order.",
    "2. Concatenate each file under `manifest.paths.chunking.parts_dir` in that exact order.",
    "3. The resulting stream is the monolithic manifest content.",
    "",
    "## Checksums",
    "",
    "- Monolith checksums: `design_manifest/design_manifest.SHA256SUMS`",
    "- Parts checksums:    `design_manifest/design_manifest.SHA256SUMS`",
    "",
    "To verify (GNU coreutils sha256sum format):",
    "",
    "```bash",
    "cd \"design_manifest/\"  # adjust if needed",
    "sha256sum -c \"design_manifest.SHA256SUMS\"",
    "```"
  ],
  "highlights": {
    "stats": {
      "files_total": 208,
      "python_modules": 2880
    },
    "constraints": {
      "offline_only": true
    },
    "entrypoints": []
  }
}
