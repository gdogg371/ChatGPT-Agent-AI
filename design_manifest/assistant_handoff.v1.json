{
  "record_type": "assistant_handoff.v1",
  "version": "2",
  "generated_at": "2025-09-02T17:36:00.276262Z",
  "artifact_root": "output/design_manifest/",
  "publish": {
    "mode": "both",
    "github": {
      "owner": "gdogg371",
      "repo": "ChatGPT-Agent-AI",
      "branch": "main",
      "raw_base": "https://raw.githubusercontent.com/gdogg371/ChatGPT-Agent-AI/main/"
    }
  },
  "transport": {
    "chunked": true,
    "part_stem": "design_manifest",
    "part_ext": ".txt",
    "parts_per_dir": 10,
    "split_bytes": 150000,
    "preserve_monolith": false,
    "parts_index": "output/design_manifest/design_manifest_parts_index.json",
    "parts_dir": "output/design_manifest/",
    "parts_count": 42,
    "monolith_path": "output/design_manifest/design_manifest.jsonl",
    "monolith_available": false,
    "how_to_consume": [
      "Read parts_index to get ordered part file refs.",
      "Stream and concatenate part files in the listed order to reconstruct the manifest stream.",
      "Do NOT lexically sort filenames; always follow the index order."
    ]
  },
  "paths": {
    "analysis_dir": "output/design_manifest/analysis/",
    "run_spec": "output/design_manifest/superbundle.run.json",
    "handoff": "output/design_manifest/assistant_handoff.v1.json",
    "checksums": {
      "monolith_sha256": "output/design_manifest/design_manifest.SHA256SUMS",
      "parts_sha256": "output/design_manifest/design_manifest.SHA256SUMS",
      "algo": "sha256"
    }
  },
  "analysis_files": {
    "asset": "output/design_manifest/analysis/asset.summary.json",
    "entrypoints": "output/design_manifest/analysis/entrypoints.summary.json",
    "env": "output/design_manifest/analysis/env.summary.json",
    "git": "output/design_manifest/analysis/git.info.summary.json",
    "license": "output/design_manifest/analysis/license.summary.json",
    "secrets": "output/design_manifest/analysis/secrets.summary.json",
    "sql": "output/design_manifest/analysis/sql.index.summary.json",
    "ast_symbols": "output/design_manifest/analysis/ast.symbols.summary.json",
    "ast_imports": "output/design_manifest/analysis/ast.imports.summary.json",
    "ast_calls": "output/design_manifest/analysis/ast.calls.summary.json",
    "docs": "output/design_manifest/analysis/docs.coverage.summary.json",
    "quality": "output/design_manifest/analysis/quality.complexity.summary.json",
    "html": "output/design_manifest/analysis/html.summary.json",
    "js": "output/design_manifest/analysis/js.index.summary.json",
    "cs": "output/design_manifest/analysis/cs.summary.json",
    "manifest": "output/design_manifest/analysis/manifest.summary.json",
    "codeowners": "output/design_manifest/analysis/codeowners.summary.json"
  },
  "quickstart": {
    "start_here": [
      {
        "title": "Run & CLI",
        "path": "output/design_manifest/analysis/entrypoints.summary.json",
        "why": "How to invoke binaries/scripts and service entrypoints."
      },
      {
        "title": "Docs coverage",
        "path": "output/design_manifest/analysis/docs.coverage.summary.json",
        "why": "Docstring coverage by module; identify gaps."
      },
      {
        "title": "Complexity hotspots",
        "path": "output/design_manifest/analysis/quality.complexity.summary.json",
        "why": "Prioritize risky modules/functions."
      },
      {
        "title": "SQL surface",
        "path": "output/design_manifest/analysis/sql.index.summary.json",
        "why": "DB schemas and queries in one place."
      },
      {
        "title": "Repo provenance",
        "path": "output/design_manifest/analysis/git.info.summary.json",
        "why": "Branch, commit, authorship if available."
      }
    ],
    "raw_manifest": [
      {
        "title": "Chunked manifest (parts index)",
        "path": "output/design_manifest/design_manifest_parts_index.json",
        "how": "Follow the listed order to stream parts."
      }
    ]
  },
  "highlights": {
    "stats": {
      "files_total": 104,
      "python_modules": 1441,
      "graph_edges": null
    },
    "top": {
      "complexity_modules": [],
      "import_modules": [],
      "entrypoints": []
    },
    "risks": {
      "secrets_findings": 0,
      "license_flags": 0
    }
  },
  "limits": {
    "max_files": 0,
    "max_bytes": 0,
    "timeout_seconds": 600
  },
  "constraints": {
    "offline_only": true
  },
  "notes": [
    "Paths are relative to artifact_root unless absolute.",
    "If preserve_monolith=false, the monolithic manifest may be empty or removed."
  ]
}
