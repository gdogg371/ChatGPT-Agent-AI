-- scripts/migrations/003_create_agent_insights.sql
-- Version: 3.0
-- Created: 2025-08-03
-- Description: Schema for agent insights, reflective entries, and system-generated observations with lifecycle tracking for re-evaluated scan outputs

BEGIN;

-- === Table Definition ===

CREATE TABLE IF NOT EXISTS public.agent_insights (
    id SERIAL PRIMARY KEY,
    agent_id INTEGER NOT NULL,
    insight_type VARCHAR(64) NOT NULL,
    content TEXT NOT NULL,
    source VARCHAR(128) DEFAULT 'internal',
    score DOUBLE PRECISION CHECK (score >= 0.0 AND score <= 1.0),
    mdata JSONB DEFAULT '{}'::jsonb,

    -- === Insight Location & Lifecycle Tracking ===
    filepath TEXT,
    symbol_name TEXT,
    line_number INTEGER DEFAULT 0,
    unique_key_hash TEXT,
    status VARCHAR(32) NOT NULL DEFAULT 'active',
    discovered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_seen_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP,
    occurrences INTEGER DEFAULT 1,
    recurrence_count INTEGER DEFAULT 0,

    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    reviewed BOOLEAN NOT NULL DEFAULT FALSE,
    reviewer VARCHAR(128),
    review_comment TEXT
);

-- === Comments for Documentation and Traceability ===

COMMENT ON TABLE public.agent_insights IS
    'Stores structured insights and reflections generated by or about agents, including type, content, trust score, metadata, and lifecycle tracking. Used for summarisation, docstring analysis, and reflective annotations.';

COMMENT ON COLUMN public.agent_insights.id IS
    'Primary key for the agent_insights table.';
COMMENT ON COLUMN public.agent_insights.agent_id IS
    'References the unique agent; should FK to agent_registry.';
COMMENT ON COLUMN public.agent_insights.insight_type IS
    'Type/classification of the insight (e.g., "docstring_summary", "code_comment", "self_reflection").';
COMMENT ON COLUMN public.agent_insights.content IS
    'Text of the insight, observation, or reflection.';
COMMENT ON COLUMN public.agent_insights.source IS
    'Source of the insight (e.g., "internal", "external", process name, or user ID).';
COMMENT ON COLUMN public.agent_insights.score IS
    'Optional confidence, trust, or impact score (0.0â€“1.0).';
COMMENT ON COLUMN public.agent_insights.mdata IS
    'JSONB metadata for extensibility, references, tags, or embedded AST data.';
COMMENT ON COLUMN public.agent_insights.filepath IS
    'File associated with the insight, if applicable.';
COMMENT ON COLUMN public.agent_insights.symbol_name IS
    'Function/class/etc. name related to the insight.';
COMMENT ON COLUMN public.agent_insights.line_number IS
    'Line number where the symbol begins (if known).';
COMMENT ON COLUMN public.agent_insights.unique_key_hash IS
    'Deterministic identity hash (filepath + symbol + type) for deduplication and lifecycle tracking.';
COMMENT ON COLUMN public.agent_insights.status IS
    'Insight lifecycle: active, resolved, ignored, etc.';
COMMENT ON COLUMN public.agent_insights.discovered_at IS
    'First detection of the insight in this location.';
COMMENT ON COLUMN public.agent_insights.last_seen_at IS
    'Most recent validation/scan confirming its presence.';
COMMENT ON COLUMN public.agent_insights.resolved_at IS
    'Timestamp when this insight was deemed resolved or fixed.';
COMMENT ON COLUMN public.agent_insights.occurrences IS
    'Total number of times this insight has been seen.';
COMMENT ON COLUMN public.agent_insights.recurrence_count IS
    'How many times the insight was resolved and later reappeared.';
COMMENT ON COLUMN public.agent_insights.created_at IS
    'Timestamp when the record was inserted.';
COMMENT ON COLUMN public.agent_insights.updated_at IS
    'Timestamp when the record was last modified.';
COMMENT ON COLUMN public.agent_insights.reviewed IS
    'Whether the insight has been manually reviewed.';
COMMENT ON COLUMN public.agent_insights.reviewer IS
    'Identity of the reviewer (human or agent).';
COMMENT ON COLUMN public.agent_insights.review_comment IS
    'Free-text verdict or reviewer annotation.';

-- === Indexes for Performance ===

CREATE INDEX IF NOT EXISTS idx_agent_insights_agent_id
    ON public.agent_insights(agent_id);

CREATE INDEX IF NOT EXISTS idx_agent_insights_type
    ON public.agent_insights(insight_type);

CREATE INDEX IF NOT EXISTS idx_agent_insights_reviewed
    ON public.agent_insights(reviewed);

CREATE INDEX IF NOT EXISTS idx_agent_insights_key_hash
    ON public.agent_insights(unique_key_hash);

-- === (Optional) Foreign Key Constraint (uncomment/adapt if agent_registry exists) ===
-- ALTER TABLE public.agent_insights
--     ADD CONSTRAINT fk_agent_insights_agent
--     FOREIGN KEY (agent_id) REFERENCES public.agent_registry(id)
--     ON DELETE CASCADE;

-- === Audit Trigger for updated_at (Optional, requires a function) ===
-- CREATE OR REPLACE FUNCTION update_agent_insights_updated_at()
-- RETURNS TRIGGER AS $$
-- BEGIN
--     NEW.updated_at = NOW();
--     RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;
--
-- DROP TRIGGER IF EXISTS trg_update_agent_insights_updated_at ON public.agent_insights;
-- CREATE TRIGGER trg_update_agent_insights_updated_at
--     BEFORE UPDATE ON public.agent_insights
--     FOR EACH ROW EXECUTE FUNCTION update_agent_insights_updated_at();

-- === Row-Level Security Policy Example (Optional) ===
-- ALTER TABLE public.agent_insights ENABLE ROW LEVEL SECURITY;
-- CREATE POLICY agent_insights_agent_access
--     ON public.agent_insights
--     USING (agent_id = current_setting('app.current_agent_id')::integer);

-- === Example Insert for Testing ===

INSERT INTO public.agent_insights
    (agent_id, insight_type, content, source, score, reviewed, filepath, symbol_name, line_number, unique_key_hash)
VALUES
    (1, 'docstring_summary', 'Function `foo()` has a clear summary and valid parameter description.', 'internal', 0.92, TRUE,
     'backend/core/diagnostics/analysers/foo.py', 'foo', 12, 'hash123abc456def');

-- === End Migration ===

COMMIT;

COMMIT;
